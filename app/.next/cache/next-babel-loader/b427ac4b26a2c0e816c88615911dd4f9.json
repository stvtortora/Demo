{"ast":null,"code":"var _jsxFileName = \"/Users/steven/Documents/lootcrate/gimme-the-loot/src/components/CoreUI/Text/SimpleText.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport { font } from \"../../../utils/styleUtils/fontUtils\";\nimport { memo } from \"react\";\nimport { sanitizeNumericVals } from \"../../../utils/styleUtils/generalCSSUtils\";\nexport const StyledText = styled.div.withConfig({\n  displayName: \"SimpleText__StyledText\",\n  componentId: \"sc-1los7xv-0\"\n})([\"\", \"\"], (_ref) => {\n  let {\n    padding,\n    margin,\n    moreStyles\n  } = _ref,\n      fontProps = _objectWithoutProperties(_ref, [\"padding\", \"margin\", \"moreStyles\"]);\n\n  return `\n    padding: ${padding};\n    margin: ${margin};\n    ${font(fontProps)};\n    ${moreStyles};\n    `;\n});\nexport const SimpleText = memo((_ref2) => {\n  let {\n    children,\n    style,\n    size,\n    color,\n    backgroundColor,\n    weight,\n    lowerCase,\n    padding,\n    margin = \"4px\",\n    moreStyles\n  } = _ref2,\n      props = _objectWithoutProperties(_ref2, [\"children\", \"style\", \"size\", \"color\", \"backgroundColor\", \"weight\", \"lowerCase\", \"padding\", \"margin\", \"moreStyles\"]);\n\n  const {\n    size: sanitizedSize,\n    padding: sanitizedPadding,\n    margin: sanitizedMargin\n  } = sanitizeNumericVals({\n    size,\n    padding,\n    margin\n  });\n  return __jsx(StyledText, _extends({\n    family: style // style is a reserved keyword for html elements, so we use 'family' here instead\n    ,\n    size: sanitizedSize,\n    color: color,\n    backgroundColor: backgroundColor,\n    weight: weight,\n    lowerCase: lowerCase,\n    padding: sanitizedPadding,\n    margin: sanitizedMargin,\n    moreStyles: moreStyles\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }), children);\n});\nSimpleText.propTypes = {\n  children: PropTypes.node,\n  style: PropTypes.string,\n  size: PropTypes.string,\n  color: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  weight: PropTypes.number,\n  lowerCase: PropTypes.bool,\n  padding: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  margin: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  moreStyles: PropTypes.string\n};","map":{"version":3,"sources":["/Users/steven/Documents/lootcrate/gimme-the-loot/src/components/CoreUI/Text/SimpleText.jsx"],"names":["PropTypes","styled","font","memo","sanitizeNumericVals","StyledText","div","padding","margin","moreStyles","fontProps","SimpleText","children","style","size","color","backgroundColor","weight","lowerCase","props","sanitizedSize","sanitizedPadding","sanitizedMargin","propTypes","node","string","number","bool","oneOfType"],"mappings":";;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,IAAT,QAAqB,qCAArB;AACA,SAASC,IAAT,QAAqB,OAArB;AACA,SAASC,mBAAT,QAAoC,2CAApC;AAEA,OAAO,MAAMC,UAAU,GAAGJ,MAAM,CAACK,GAAV;AAAA;AAAA;AAAA,aACnB,UAAmD;AAAA,MAAlD;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,MAAX;AAAmBC,IAAAA;AAAnB,GAAkD;AAAA,MAAhBC,SAAgB;;AACnD,SAAQ;eACGH,OAAQ;cACTC,MAAO;MACfN,IAAI,CAACQ,SAAD,CAAY;MAChBD,UAAW;KAJb;AAMD,CARoB,CAAhB;AAWP,OAAO,MAAME,UAAU,GAAGR,IAAI,CAC5B,WAYM;AAAA,MAZL;AACCS,IAAAA,QADD;AAECC,IAAAA,KAFD;AAGCC,IAAAA,IAHD;AAICC,IAAAA,KAJD;AAKCC,IAAAA,eALD;AAMCC,IAAAA,MAND;AAOCC,IAAAA,SAPD;AAQCX,IAAAA,OARD;AASCC,IAAAA,MAAM,GAAG,KATV;AAUCC,IAAAA;AAVD,GAYK;AAAA,MADDU,KACC;;AACJ,QAAM;AACJL,IAAAA,IAAI,EAAEM,aADF;AAEJb,IAAAA,OAAO,EAAEc,gBAFL;AAGJb,IAAAA,MAAM,EAAEc;AAHJ,MAIFlB,mBAAmB,CAAC;AAAEU,IAAAA,IAAF;AAAQP,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,GAAD,CAJvB;AAKA,SACE,MAAC,UAAD;AACE,IAAA,MAAM,EAAEK,KADV,CACiB;AADjB;AAEE,IAAA,IAAI,EAAEO,aAFR;AAGE,IAAA,KAAK,EAAEL,KAHT;AAIE,IAAA,eAAe,EAAEC,eAJnB;AAKE,IAAA,MAAM,EAAEC,MALV;AAME,IAAA,SAAS,EAAEC,SANb;AAOE,IAAA,OAAO,EAAEG,gBAPX;AAQE,IAAA,MAAM,EAAEC,eARV;AASE,IAAA,UAAU,EAAEb;AATd,KAUMU,KAVN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAYGP,QAZH,CADF;AAgBD,CAnC2B,CAAvB;AAsCPD,UAAU,CAACY,SAAX,GAAuB;AACrBX,EAAAA,QAAQ,EAAEZ,SAAS,CAACwB,IADC;AAErBX,EAAAA,KAAK,EAAEb,SAAS,CAACyB,MAFI;AAGrBX,EAAAA,IAAI,EAAEd,SAAS,CAACyB,MAHK;AAIrBV,EAAAA,KAAK,EAAEf,SAAS,CAACyB,MAJI;AAKrBT,EAAAA,eAAe,EAAEhB,SAAS,CAACyB,MALN;AAMrBR,EAAAA,MAAM,EAAEjB,SAAS,CAAC0B,MANG;AAOrBR,EAAAA,SAAS,EAAElB,SAAS,CAAC2B,IAPA;AAQrBpB,EAAAA,OAAO,EAAEP,SAAS,CAAC4B,SAAV,CAAoB,CAAC5B,SAAS,CAACyB,MAAX,EAAmBzB,SAAS,CAAC0B,MAA7B,CAApB,CARY;AASrBlB,EAAAA,MAAM,EAAER,SAAS,CAAC4B,SAAV,CAAoB,CAAC5B,SAAS,CAACyB,MAAX,EAAmBzB,SAAS,CAAC0B,MAA7B,CAApB,CATa;AAUrBjB,EAAAA,UAAU,EAAET,SAAS,CAACyB;AAVD,CAAvB","sourcesContent":["import PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport { font } from \"../../../utils/styleUtils/fontUtils\";\nimport { memo } from \"react\";\nimport { sanitizeNumericVals } from \"../../../utils/styleUtils/generalCSSUtils\";\n\nexport const StyledText = styled.div`\n  ${({ padding, margin, moreStyles, ...fontProps }) => {\n    return `\n    padding: ${padding};\n    margin: ${margin};\n    ${font(fontProps)};\n    ${moreStyles};\n    `;\n  }}\n`;\n\nexport const SimpleText = memo(\n  ({\n    children,\n    style,\n    size,\n    color,\n    backgroundColor,\n    weight,\n    lowerCase,\n    padding,\n    margin = \"4px\",\n    moreStyles,\n    ...props\n  }) => {\n    const {\n      size: sanitizedSize,\n      padding: sanitizedPadding,\n      margin: sanitizedMargin,\n    } = sanitizeNumericVals({ size, padding, margin });\n    return (\n      <StyledText\n        family={style} // style is a reserved keyword for html elements, so we use 'family' here instead\n        size={sanitizedSize}\n        color={color}\n        backgroundColor={backgroundColor}\n        weight={weight}\n        lowerCase={lowerCase}\n        padding={sanitizedPadding}\n        margin={sanitizedMargin}\n        moreStyles={moreStyles}\n        {...props}\n      >\n        {children}\n      </StyledText>\n    );\n  }\n);\n\nSimpleText.propTypes = {\n  children: PropTypes.node,\n  style: PropTypes.string,\n  size: PropTypes.string,\n  color: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  weight: PropTypes.number,\n  lowerCase: PropTypes.bool,\n  padding: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  margin: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  moreStyles: PropTypes.string,\n};\n"]},"metadata":{},"sourceType":"module"}