{"ast":null,"code":"var _jsxFileName = \"/Users/steven/Documents/lootcrate/gimme-the-loot/src/components/Tabs/dashboard.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { GridElement } from \"../CoreUI/Grid/GridElement\";\nimport { Grid } from \"../CoreUI/Grid/Grid\";\nimport { Chart } from \"../CoreUI/Chart/Chart\";\nimport { SimpleText } from \"../CoreUI/Text/SimpleText\";\nimport { GridElementHeaderProps } from \"../../utils/styleUtils/commonTextProps\";\nimport { MultiText } from \"../CoreUI/Text/MultiText\";\nimport styled from \"styled-components\";\nimport { centerMixin } from \"../../utils/styleUtils/generalCSSUtils\";\nimport { TabSectionHeaderProps } from \"../../utils/styleUtils/commonTextProps\";\nimport { useStats } from \"../../hooks/useStats\";\n\nconst StreamPerformanceChart = () => {\n  return __jsx(Chart, {\n    chartConfig: {\n      chart: {\n        type: \"column\"\n      },\n      title: {\n        text: null\n      },\n      legend: {\n        verticalAlign: \"top\"\n      },\n      xAxis: {\n        categories: [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"],\n        crosshair: true\n      },\n      yAxis: {\n        min: 0,\n        title: {\n          text: null\n        }\n      },\n      tooltip: {\n        headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n        pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' + '<td style=\"padding:0\"><b>{point.y:.1f} mm</b></td></tr>',\n        footerFormat: \"</table>\",\n        shared: true,\n        useHTML: true\n      },\n      plotOptions: {\n        column: {\n          pointPadding: 0.2,\n          borderWidth: 0\n        }\n      },\n      series: [{\n        name: \"Average Viewers\",\n        color: \"#A4A1FB\",\n        data: [49.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6]\n      }, {\n        name: \"Unique Viewers\",\n        color: \"#56D9FE\",\n        data: [83, 78, 98, 93, 106, 84, 105]\n      }],\n      credits: {\n        enabled: false\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  });\n};\n\nconst ViewSourceDistributionChart = ({\n  followers,\n  searches,\n  channels,\n  other\n}) => {\n  return __jsx(Chart, {\n    chartConfig: {\n      chart: {\n        type: \"pie\"\n      },\n      title: {\n        text: null\n      },\n      legend: {\n        align: \"right\",\n        layout: \"vertical\",\n        verticalAlign: \"middle\",\n        itemMarginBottom: 12\n      },\n      plotOptions: {\n        pie: {\n          shadow: false,\n          center: [\"50%\", \"50%\"],\n          showInLegend: true\n        }\n      },\n      tooltip: {\n        valueSuffix: \"%\"\n      },\n      series: [{\n        name: \"Distribution\",\n        data: [{\n          name: \"Followers\",\n          y: followers,\n          color: \"blue\"\n        }, {\n          name: \"Searches\",\n          y: 15,\n          searches: \"red\"\n        }, {\n          name: \"Other\",\n          y: 30,\n          other: \"green\"\n        }, {\n          name: \"Channels\",\n          y: 35,\n          channels: \"purple\"\n        }],\n        size: \"80%\",\n        innerSize: \"60%\",\n        dataLabels: {\n          enabled: false\n        },\n        id: \"distribution\"\n      }],\n      responsive: {\n        rules: [{\n          condition: {},\n          chartOptions: {\n            series: [{}, {\n              id: \"versions\",\n              dataLabels: {\n                enabled: false\n              }\n            }]\n          }\n        }]\n      },\n      credits: {\n        enabled: false\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  });\n};\n\nconst SingleStatMetricWrapper = styled.div.withConfig({\n  displayName: \"dashboard__SingleStatMetricWrapper\",\n  componentId: \"sc-1ff8fht-0\"\n})([\"\", \" flex-direction:column;height:100%;\"], centerMixin);\n\nconst SingleStatMetric = ({\n  textTheme: {\n    styles,\n    sizes,\n    colors\n  },\n  percentChangeColor,\n  textData\n}) => {\n  return __jsx(SingleStatMetricWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 5\n    }\n  }, __jsx(MultiText, {\n    textConfigs: [{\n      content: textData[0],\n      style: styles.primary,\n      size: sizes.medium,\n      color: colors.secondary,\n      moreStyles: \"opacity: 50%\"\n    }, {\n      content: textData[1],\n      style: styles.bold,\n      size: sizes.xxlarge,\n      color: colors.primary,\n      weight: 700\n    }, {\n      content: textData[2],\n      style: styles.bold,\n      size: sizes.xsmall,\n      color: percentChangeColor,\n      weight: 700\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport const Dashboard = ({\n  theme\n}) => {\n  const {\n    stats\n  } = useStats();\n\n  if (!stats) {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 5\n    }\n  }, __jsx(SimpleText, _extends({}, TabSectionHeaderProps(theme), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }\n  }), \"Stream Overview\"), __jsx(Grid, {\n    numCols: 12,\n    numRows: 4,\n    rowUnit: \"135px\",\n    colUnit: \"56px\",\n    key: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }\n  }, __jsx(GridElement, {\n    position: {\n      startCol: 1,\n      endCol: 7,\n      startRow: 2,\n      endRow: 4\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }\n  }, __jsx(SimpleText, _extends({}, GridElementHeaderProps(theme), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 11\n    }\n  }), \"View Source Distribution\"), __jsx(ViewSourceDistributionChart, {\n    followers: stats.followers,\n    searches: stats.searches,\n    channels: stats.channels,\n    other: stats.other,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 11\n    }\n  })), __jsx(GridElement, {\n    position: {\n      startCol: 7,\n      endCol: 13,\n      startRow: 2,\n      endRow: 4\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }\n  }, __jsx(SimpleText, _extends({}, GridElementHeaderProps(theme), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 11\n    }\n  }), \"Stream Performance\"), __jsx(StreamPerformanceChart, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 11\n    }\n  })), __jsx(GridElement, {\n    position: {\n      startCol: 1,\n      endCol: 5,\n      startRow: 1,\n      endRow: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 9\n    }\n  }, __jsx(SingleStatMetric, {\n    textData: [\"Total Views\", stats.total_views, \"13%\"],\n    textTheme: theme.text,\n    percentChangeColor: theme.text.colors.other.e,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 11\n    }\n  })), __jsx(GridElement, {\n    position: {\n      startCol: 5,\n      endCol: 9,\n      startRow: 1,\n      endRow: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }\n  }, __jsx(SingleStatMetric, {\n    textData: [\"Engagements\", stats.engagements, \"12%\"],\n    textTheme: theme.text,\n    percentChangeColor: theme.text.colors.other.e,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 11\n    }\n  })), __jsx(GridElement, {\n    position: {\n      startCol: 9,\n      endCol: 13,\n      startRow: 1,\n      endRow: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 9\n    }\n  }, __jsx(SingleStatMetric, {\n    textData: [\"Follower Reach\", stats.followers, \"12%\"],\n    textTheme: theme.text,\n    percentChangeColor: theme.text.colors.other.e,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 11\n    }\n  })), __jsx(GridElement, {\n    position: {\n      startCol: 1,\n      endCol: 5,\n      startRow: 4,\n      endRow: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 9\n    }\n  }, __jsx(SingleStatMetric, {\n    textData: [\"Total Views\", stats.total_views, \"13%\"],\n    textTheme: theme.text,\n    percentChangeColor: theme.text.colors.other.e,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 11\n    }\n  })), __jsx(GridElement, {\n    position: {\n      startCol: 5,\n      endCol: 9,\n      startRow: 4,\n      endRow: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 9\n    }\n  }, __jsx(SingleStatMetric, {\n    textData: [\"Engagements\", stats.engagements, \"12%\"],\n    textTheme: theme.text,\n    percentChangeColor: theme.text.colors.other.e,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 11\n    }\n  })), __jsx(GridElement, {\n    position: {\n      startCol: 9,\n      endCol: 13,\n      startRow: 4,\n      endRow: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 9\n    }\n  }, __jsx(SingleStatMetric, {\n    textData: [\"Follower Reach\", stats.followers, \"12%\"],\n    textTheme: theme.text,\n    percentChangeColor: theme.text.colors.other.e,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 11\n    }\n  }))));\n};","map":{"version":3,"sources":["/Users/steven/Documents/lootcrate/gimme-the-loot/src/components/Tabs/dashboard.jsx"],"names":["GridElement","Grid","Chart","SimpleText","GridElementHeaderProps","MultiText","styled","centerMixin","TabSectionHeaderProps","useStats","StreamPerformanceChart","chart","type","title","text","legend","verticalAlign","xAxis","categories","crosshair","yAxis","min","tooltip","headerFormat","pointFormat","footerFormat","shared","useHTML","plotOptions","column","pointPadding","borderWidth","series","name","color","data","credits","enabled","ViewSourceDistributionChart","followers","searches","channels","other","align","layout","itemMarginBottom","pie","shadow","center","showInLegend","valueSuffix","y","size","innerSize","dataLabels","id","responsive","rules","condition","chartOptions","SingleStatMetricWrapper","div","SingleStatMetric","textTheme","styles","sizes","colors","percentChangeColor","textData","content","style","primary","medium","secondary","moreStyles","bold","xxlarge","weight","xsmall","Dashboard","theme","stats","startCol","endCol","startRow","endRow","total_views","e","engagements"],"mappings":"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","sourcesContent":["import { GridElement } from \"../CoreUI/Grid/GridElement\";\nimport { Grid } from \"../CoreUI/Grid/Grid\";\nimport { Chart } from \"../CoreUI/Chart/Chart\";\nimport { SimpleText } from \"../CoreUI/Text/SimpleText\";\nimport { GridElementHeaderProps } from \"../../utils/styleUtils/commonTextProps\";\nimport { MultiText } from \"../CoreUI/Text/MultiText\";\nimport styled from \"styled-components\";\nimport { centerMixin } from \"../../utils/styleUtils/generalCSSUtils\";\nimport { TabSectionHeaderProps } from \"../../utils/styleUtils/commonTextProps\";\nimport { useStats } from \"../../hooks/useStats\";\n\nconst StreamPerformanceChart = () => {\n  return (\n    <Chart\n      chartConfig={{\n        chart: {\n          type: \"column\",\n        },\n        title: {\n          text: null,\n        },\n        legend: {\n          verticalAlign: \"top\",\n        },\n        xAxis: {\n          categories: [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"],\n          crosshair: true,\n        },\n        yAxis: {\n          min: 0,\n          title: {\n            text: null,\n          },\n        },\n        tooltip: {\n          headerFormat:\n            '<span style=\"font-size:10px\">{point.key}</span><table>',\n          pointFormat:\n            '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\n            '<td style=\"padding:0\"><b>{point.y:.1f} mm</b></td></tr>',\n          footerFormat: \"</table>\",\n          shared: true,\n          useHTML: true,\n        },\n        plotOptions: {\n          column: {\n            pointPadding: 0.2,\n            borderWidth: 0,\n          },\n        },\n        series: [\n          {\n            name: \"Average Viewers\",\n            color: \"#A4A1FB\",\n            data: [49.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6],\n          },\n          {\n            name: \"Unique Viewers\",\n            color: \"#56D9FE\",\n            data: [83, 78, 98, 93, 106, 84, 105],\n          },\n        ],\n        credits: {\n          enabled: false,\n        },\n      }}\n    />\n  );\n};\n\nconst ViewSourceDistributionChart = ({ followers, searches, channels, other }) => {\n  return (\n    <Chart\n      chartConfig={{\n        chart: {\n          type: \"pie\",\n        },\n        title: {\n          text: null,\n        },\n        legend: {\n          align: \"right\",\n          layout: \"vertical\",\n          verticalAlign: \"middle\",\n          itemMarginBottom: 12,\n        },\n        plotOptions: {\n          pie: {\n            shadow: false,\n            center: [\"50%\", \"50%\"],\n            showInLegend: true,\n          },\n        },\n        tooltip: {\n          valueSuffix: \"%\",\n        },\n        series: [\n          {\n            name: \"Distribution\",\n            data: [\n              { name: \"Followers\", y: followers, color: \"blue\" },\n              { name: \"Searches\", y: 15, searches: \"red\" },\n              { name: \"Other\", y: 30, other: \"green\" },\n              { name: \"Channels\", y: 35, channels: \"purple\" },\n            ],\n            size: \"80%\",\n            innerSize: \"60%\",\n            dataLabels: {\n              enabled: false,\n            },\n            id: \"distribution\",\n          },\n        ],\n        responsive: {\n          rules: [\n            {\n              condition: {},\n              chartOptions: {\n                series: [\n                  {},\n                  {\n                    id: \"versions\",\n                    dataLabels: {\n                      enabled: false,\n                    },\n                  },\n                ],\n              },\n            },\n          ],\n        },\n        credits: {\n          enabled: false,\n        },\n      }}\n    />\n  );\n};\n\nconst SingleStatMetricWrapper = styled.div`\n  ${centerMixin}\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst SingleStatMetric = ({\n  textTheme: { styles, sizes, colors },\n  percentChangeColor,\n  textData,\n}) => {\n  return (\n    <SingleStatMetricWrapper>\n      <MultiText\n        textConfigs={[\n          {\n            content: textData[0],\n            style: styles.primary,\n            size: sizes.medium,\n            color: colors.secondary,\n            moreStyles: \"opacity: 50%\",\n          },\n          {\n            content: textData[1],\n            style: styles.bold,\n            size: sizes.xxlarge,\n            color: colors.primary,\n            weight: 700,\n          },\n          {\n            content: textData[2],\n            style: styles.bold,\n            size: sizes.xsmall,\n            color: percentChangeColor,\n            weight: 700,\n          },\n        ]}\n      />\n    </SingleStatMetricWrapper>\n  );\n};\n\nexport const Dashboard = ({ theme }) => {\n  const { stats } = useStats();\n\n  if (!stats) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <React.Fragment>\n      <SimpleText {...TabSectionHeaderProps(theme)}>Stream Overview</SimpleText>\n      <Grid numCols={12} numRows={4} rowUnit=\"135px\" colUnit=\"56px\" key={1}>\n        <GridElement\n          position={{\n            startCol: 1,\n            endCol: 7,\n            startRow: 2,\n            endRow: 4,\n          }}\n        >\n          <SimpleText {...GridElementHeaderProps(theme)}>\n            View Source Distribution\n          </SimpleText>\n          <ViewSourceDistributionChart\n            followers={stats.followers}\n            searches={stats.searches}\n            channels={stats.channels}\n            other={stats.other}\n          />\n        </GridElement>\n        <GridElement\n          position={{\n            startCol: 7,\n            endCol: 13,\n            startRow: 2,\n            endRow: 4,\n          }}\n        >\n          <SimpleText {...GridElementHeaderProps(theme)}>\n            Stream Performance\n          </SimpleText>\n          <StreamPerformanceChart />\n        </GridElement>\n        <GridElement\n          position={{\n            startCol: 1,\n            endCol: 5,\n            startRow: 1,\n            endRow: 2,\n          }}\n        >\n          <SingleStatMetric\n            textData={[\"Total Views\", stats.total_views, \"13%\"]}\n            textTheme={theme.text}\n            percentChangeColor={theme.text.colors.other.e}\n          />\n        </GridElement>\n        <GridElement\n          position={{\n            startCol: 5,\n            endCol: 9,\n            startRow: 1,\n            endRow: 2,\n          }}\n        >\n          <SingleStatMetric\n            textData={[\"Engagements\", stats.engagements, \"12%\"]}\n            textTheme={theme.text}\n            percentChangeColor={theme.text.colors.other.e}\n          />\n        </GridElement>\n        <GridElement\n          position={{\n            startCol: 9,\n            endCol: 13,\n            startRow: 1,\n            endRow: 2,\n          }}\n        >\n          <SingleStatMetric\n            textData={[\"Follower Reach\", stats.followers, \"12%\"]}\n            textTheme={theme.text}\n            percentChangeColor={theme.text.colors.other.e}\n          />\n        </GridElement>\n        <GridElement\n          position={{\n            startCol: 1,\n            endCol: 5,\n            startRow: 4,\n            endRow: 5,\n          }}\n        >\n          <SingleStatMetric\n            textData={[\"Total Views\", stats.total_views, \"13%\"]}\n            textTheme={theme.text}\n            percentChangeColor={theme.text.colors.other.e}\n          />\n        </GridElement>\n        <GridElement\n          position={{\n            startCol: 5,\n            endCol: 9,\n            startRow: 4,\n            endRow: 5,\n          }}\n        >\n          <SingleStatMetric\n            textData={[\"Engagements\", stats.engagements, \"12%\"]}\n            textTheme={theme.text}\n            percentChangeColor={theme.text.colors.other.e}\n          />\n        </GridElement>\n        <GridElement\n          position={{\n            startCol: 9,\n            endCol: 13,\n            startRow: 4,\n            endRow: 5,\n          }}\n        >\n          <SingleStatMetric\n            textData={[\"Follower Reach\", stats.followers, \"12%\"]}\n            textTheme={theme.text}\n            percentChangeColor={theme.text.colors.other.e}\n          />\n        </GridElement>\n      </Grid>\n    </React.Fragment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}