{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar x = [\"background\", \"colors\", \"primary\"];\n\nvar addField = function addField(fieldKeyArray, value, theme) {\n  var currentKey = fieldKeyArray[0];\n\n  if (fieldKeyArray.length === 1) {\n    return _defineProperty({}, currentKey, value);\n  } else {\n    if (!theme[currentKey]) {\n      theme[currentKey] = {};\n    }\n\n    var _x = addField(fieldKeyArray.slice(1), value, theme[currentKey]);\n\n    theme[currentKey] = _objectSpread(_objectSpread({}, theme[currentKey]), _x);\n  }\n\n  return theme;\n};\n\nexport default (function (themeFields) {\n  var theme = Object.keys(themeFields).reduce(function (result, fieldKey) {\n    result = addField(fieldKey.split(\"_\"), themeFields[fieldKey], result);\n    return result;\n  }, {});\n  console.log(\"BUILT THEME\");\n  console.log(theme);\n  return theme;\n});","map":{"version":3,"sources":["/Users/steven/Documents/lootcrate/gimme-the-loot/src/utils/buildTheme.js"],"names":["x","addField","fieldKeyArray","value","theme","currentKey","length","slice","themeFields","Object","keys","reduce","result","fieldKey","split","console","log"],"mappings":";;;;;;AAAA,IAAMA,CAAC,GAAG,CAAC,YAAD,EAAe,QAAf,EAAyB,SAAzB,CAAV;;AAGA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,aAAD,EAAgBC,KAAhB,EAAuBC,KAAvB,EAAiC;AAC9C,MAAMC,UAAU,GAAGH,aAAa,CAAC,CAAD,CAAhC;;AAEA,MAAIA,aAAa,CAACI,MAAd,KAAyB,CAA7B,EAAgC;AAC5B,+BAAUD,UAAV,EAAuBF,KAAvB;AACH,GAFD,MAEO;AACH,QAAI,CAACC,KAAK,CAACC,UAAD,CAAV,EAAwB;AACpBD,MAAAA,KAAK,CAACC,UAAD,CAAL,GAAoB,EAApB;AACH;;AACD,QAAML,EAAC,GAAGC,QAAQ,CAACC,aAAa,CAACK,KAAd,CAAoB,CAApB,CAAD,EAAyBJ,KAAzB,EAAgCC,KAAK,CAACC,UAAD,CAArC,CAAlB;;AACAD,IAAAA,KAAK,CAACC,UAAD,CAAL,mCAAyBD,KAAK,CAACC,UAAD,CAA9B,GAA+CL,EAA/C;AACH;;AAED,SAAOI,KAAP;AACH,CAdD;;AAgBA,gBAAe,UAACI,WAAD,EAAiB;AAC5B,MAAMJ,KAAK,GAAGK,MAAM,CAACC,IAAP,CAAYF,WAAZ,EAAyBG,MAAzB,CAAgC,UAACC,MAAD,EAASC,QAAT,EAAsB;AAChED,IAAAA,MAAM,GAAGX,QAAQ,CAACY,QAAQ,CAACC,KAAT,CAAe,GAAf,CAAD,EAAsBN,WAAW,CAACK,QAAD,CAAjC,EAA6CD,MAA7C,CAAjB;AAEA,WAAOA,MAAP;AACH,GAJa,EAIX,EAJW,CAAd;AAKAG,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ;AACA,SAAOA,KAAP;AACH,CATD","sourcesContent":["const x = [\"background\", \"colors\", \"primary\"]\n\n\nconst addField = (fieldKeyArray, value, theme) => {\n    const currentKey = fieldKeyArray[0];\n\n    if (fieldKeyArray.length === 1) {\n        return { [currentKey]: value };\n    } else {\n        if (!theme[currentKey]) {\n            theme[currentKey] = {};\n        }\n        const x = addField(fieldKeyArray.slice(1), value, theme[currentKey]);\n        theme[currentKey] = { ...theme[currentKey], ...x };\n    }\n\n    return theme;\n}\n\nexport default (themeFields) => {\n    const theme = Object.keys(themeFields).reduce((result, fieldKey) => {\n        result = addField(fieldKey.split(\"_\"), themeFields[fieldKey], result);\n\n        return result;\n    }, {});\n    console.log(\"BUILT THEME\");\n    console.log(theme);\n    return theme;\n}"]},"metadata":{},"sourceType":"module"}