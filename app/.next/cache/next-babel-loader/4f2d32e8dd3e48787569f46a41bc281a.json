{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getThemes, updateTheme, createTheme, deleteTheme } from \"../api/theme_api\";\nimport { useEffect, useState } from \"react\";\nimport defaultThemeValues from \"../themes/defaultThemeValues\";\n\nconst defaultTheme = _objectSpread(_objectSpread({}, defaultThemeValues), {}, {\n  name: \"Default\"\n});\n\nexport const useThemeOptions = () => {\n  const {\n    0: themeOptions,\n    1: setThemeOptions\n  } = useState([defaultTheme]);\n  const {\n    0: error,\n    1: setError\n  } = useState(false);\n  useEffect(() => {\n    const callGetThemes = async () => {\n      const {\n        error,\n        response\n      } = await getThemes();\n\n      if (!error) {\n        setError(true);\n        setThemeOptions([defaultTheme].concat(response));\n      }\n    };\n\n    callGetThemes();\n  }, []);\n\n  const onUpdateTheme = async theme => {\n    const {\n      error,\n      response: updatedTheme\n    } = await updateTheme(theme);\n\n    if (error) {\n      setError(true);\n    } else {}\n\n    const updatedThemeOptions = themeOptions.map(theme => theme.id !== updatedTheme.id ? theme : updatedTheme);\n    setThemeOptions(updatedThemeOptions);\n  };\n\n  const onCreateTheme = async theme => {\n    const {\n      error,\n      response: newTheme\n    } = await createTheme(theme);\n\n    if (error) {\n      setError(true);\n    } else {\n      const updatedThemeOptions = themeOptions.concat([newTheme]);\n      setThemeOptions(updatedThemeOptions);\n    }\n  };\n\n  const onDeleteTheme = async themeId => {\n    const {\n      error\n    } = await deleteTheme(themeId);\n\n    if (error) {\n      setError(true);\n    } else {\n      const updatedThemeOptions = themeOptions.filter(theme => theme.id !== themeId);\n      setThemeOptions(updatedThemeOptions);\n    }\n  };\n\n  return {\n    error,\n    themeOptions,\n    onUpdateTheme,\n    onCreateTheme,\n    onDeleteTheme\n  };\n};","map":{"version":3,"sources":["/Users/steven/Documents/lootcrate/gimme-the-loot/src/hooks/useThemeOptions.jsx"],"names":["getThemes","updateTheme","createTheme","deleteTheme","useEffect","useState","defaultThemeValues","defaultTheme","name","useThemeOptions","themeOptions","setThemeOptions","error","setError","callGetThemes","response","concat","onUpdateTheme","theme","updatedTheme","updatedThemeOptions","map","id","onCreateTheme","newTheme","onDeleteTheme","themeId","filter"],"mappings":";;;;;;AAAA,SACEA,SADF,EAEEC,WAFF,EAGEC,WAHF,EAIEC,WAJF,QAKO,kBALP;AAMA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,kBAAP,MAA+B,8BAA/B;;AAEA,MAAMC,YAAY,mCAAQD,kBAAR;AAA4BE,EAAAA,IAAI,EAAE;AAAlC,EAAlB;;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAM;AACnC,QAAM;AAAA,OAACC,YAAD;AAAA,OAAeC;AAAf,MAAkCN,QAAQ,CAAC,CAACE,YAAD,CAAD,CAAhD;AACA,QAAM;AAAA,OAACK,KAAD;AAAA,OAAQC;AAAR,MAAoBR,QAAQ,CAAC,KAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,aAAa,GAAG,YAAY;AAChC,YAAM;AAAEF,QAAAA,KAAF;AAASG,QAAAA;AAAT,UAAsB,MAAMf,SAAS,EAA3C;;AAEA,UAAI,CAACY,KAAL,EAAY;AACVC,QAAAA,QAAQ,CAAC,IAAD,CAAR;AAEAF,QAAAA,eAAe,CAAC,CAACJ,YAAD,EAAeS,MAAf,CAAsBD,QAAtB,CAAD,CAAf;AACD;AACF,KARD;;AAUAD,IAAAA,aAAa;AACd,GAZQ,EAYN,EAZM,CAAT;;AAcA,QAAMG,aAAa,GAAG,MAAOC,KAAP,IAAiB;AACrC,UAAM;AAAEN,MAAAA,KAAF;AAASG,MAAAA,QAAQ,EAAEI;AAAnB,QAAoC,MAAMlB,WAAW,CAACiB,KAAD,CAA3D;;AACA,QAAIN,KAAJ,EAAW;AACTC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KAFD,MAEO,CACN;;AACD,UAAMO,mBAAmB,GAAGV,YAAY,CAACW,GAAb,CAAkBH,KAAD,IAC3CA,KAAK,CAACI,EAAN,KAAaH,YAAY,CAACG,EAA1B,GAA+BJ,KAA/B,GAAuCC,YADb,CAA5B;AAGAR,IAAAA,eAAe,CAACS,mBAAD,CAAf;AACD,GAVD;;AAYA,QAAMG,aAAa,GAAG,MAAOL,KAAP,IAAiB;AACrC,UAAM;AAAEN,MAAAA,KAAF;AAASG,MAAAA,QAAQ,EAAES;AAAnB,QAAgC,MAAMtB,WAAW,CAACgB,KAAD,CAAvD;;AACA,QAAIN,KAAJ,EAAW;AACTC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KAFD,MAEO;AACL,YAAMO,mBAAmB,GAAGV,YAAY,CAACM,MAAb,CAAoB,CAACQ,QAAD,CAApB,CAA5B;AACAb,MAAAA,eAAe,CAACS,mBAAD,CAAf;AACD;AACF,GARD;;AAUA,QAAMK,aAAa,GAAG,MAAOC,OAAP,IAAmB;AACvC,UAAM;AAAEd,MAAAA;AAAF,QAAY,MAAMT,WAAW,CAACuB,OAAD,CAAnC;;AACA,QAAId,KAAJ,EAAW;AACTC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KAFD,MAEO;AACL,YAAMO,mBAAmB,GAAGV,YAAY,CAACiB,MAAb,CACzBT,KAAD,IAAWA,KAAK,CAACI,EAAN,KAAaI,OADE,CAA5B;AAGAf,MAAAA,eAAe,CAACS,mBAAD,CAAf;AACD;AACF,GAVD;;AAYA,SAAO;AAAER,IAAAA,KAAF;AAASF,IAAAA,YAAT;AAAuBO,IAAAA,aAAvB;AAAsCM,IAAAA,aAAtC;AAAqDE,IAAAA;AAArD,GAAP;AACD,CArDM","sourcesContent":["import {\n  getThemes,\n  updateTheme,\n  createTheme,\n  deleteTheme,\n} from \"../api/theme_api\";\nimport { useEffect, useState } from \"react\";\nimport defaultThemeValues from \"../themes/defaultThemeValues\";\n\nconst defaultTheme = { ...defaultThemeValues, name: \"Default\" };\n\nexport const useThemeOptions = () => {\n  const [themeOptions, setThemeOptions] = useState([defaultTheme]);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    const callGetThemes = async () => {\n      const { error, response } = await getThemes();\n\n      if (!error) {\n        setError(true);\n\n        setThemeOptions([defaultTheme].concat(response));\n      }\n    };\n\n    callGetThemes();\n  }, []);\n\n  const onUpdateTheme = async (theme) => {\n    const { error, response: updatedTheme } = await updateTheme(theme);\n    if (error) {\n      setError(true);\n    } else {\n    }\n    const updatedThemeOptions = themeOptions.map((theme) =>\n      theme.id !== updatedTheme.id ? theme : updatedTheme\n    );\n    setThemeOptions(updatedThemeOptions);\n  };\n\n  const onCreateTheme = async (theme) => {\n    const { error, response: newTheme } = await createTheme(theme);\n    if (error) {\n      setError(true);\n    } else {\n      const updatedThemeOptions = themeOptions.concat([newTheme]);\n      setThemeOptions(updatedThemeOptions);\n    }\n  };\n\n  const onDeleteTheme = async (themeId) => {\n    const { error } = await deleteTheme(themeId);\n    if (error) {\n      setError(true);\n    } else {\n      const updatedThemeOptions = themeOptions.filter(\n        (theme) => theme.id !== themeId\n      );\n      setThemeOptions(updatedThemeOptions);\n    }\n  };\n\n  return { error, themeOptions, onUpdateTheme, onCreateTheme, onDeleteTheme };\n};\n"]},"metadata":{},"sourceType":"module"}