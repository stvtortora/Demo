{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { getThemes } from \"../api/theme_api\";\nimport { useEffect, useState } from \"react\";\nexport var useThemeOptions = function useThemeOptions() {\n  _s();\n\n  var _useState = useState(),\n      themeOptions = _useState[0],\n      setThemeOptions = _useState[1];\n\n  useEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var options;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return getThemes();\n\n          case 2:\n            options = _context.sent;\n            setThemeOptions(options);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), []); // const getTheme\n\n  return {\n    themeOptions: themeOptions\n  };\n};\n\n_s(useThemeOptions, \"Tb4LceiM/5p9AF/KXI1Qjn8FZTg=\");","map":{"version":3,"sources":["/Users/steven/Documents/lootcrate/gimme-the-loot/src/hooks/useThemeOptions.jsx"],"names":["getThemes","useEffect","useState","useThemeOptions","themeOptions","setThemeOptions","options"],"mappings":";;;;;AAAA,SAASA,SAAT,QAA0B,kBAA1B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAGA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAAA;;AAAA,kBACOD,QAAQ,EADf;AAAA,MAC1BE,YAD0B;AAAA,MACZC,eADY;;AAGjCJ,EAAAA,SAAS,wEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACgBD,SAAS,EADzB;;AAAA;AACAM,YAAAA,OADA;AAGND,YAAAA,eAAe,CAACC,OAAD,CAAf;;AAHM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAIN,EAJM,CAAT,CAHiC,CASjC;;AAEA,SAAO;AAAEF,IAAAA,YAAY,EAAZA;AAAF,GAAP;AACH,CAZM;;GAAMD,e","sourcesContent":["import { getThemes } from \"../api/theme_api\"\nimport { useEffect, useState } from \"react\";\n\n\nexport const useThemeOptions = () => {\n    const [themeOptions, setThemeOptions] = useState();\n\n    useEffect(async () => {\n        const options = await getThemes();\n\n        setThemeOptions(options);\n    }, []);\n\n    // const getTheme\n\n    return { themeOptions }\n}"]},"metadata":{},"sourceType":"module"}