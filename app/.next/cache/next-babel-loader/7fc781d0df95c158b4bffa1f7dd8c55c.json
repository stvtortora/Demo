{"ast":null,"code":"var _jsxFileName = \"/Users/steven/Documents/lootcrate/gimme-the-loot/src/components/Tabs/manage_themes/theme_form.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Grid } from \"../../CoreUI/Grid/Grid\";\nimport { GridElement } from \"../../CoreUI/Grid/GridElement\";\nimport { GridElementHeaderProps } from \"../../../utils/styleUtils/commonTextProps\";\nimport { SimpleText } from \"../../CoreUI/Text/SimpleText\";\nimport { DecoratedText } from \"../../CoreUI/Text/DecoratedText\";\nimport { CompactPicker } from \"react-color\";\nimport { RelativePop } from \"../../CoreUI/Popover/RelativePop\";\nimport { useState, useRef } from \"react\";\nimport styled from \"styled-components\";\nconst ThemeFieldWrapper = styled.div.withConfig({\n  displayName: \"theme_form__ThemeFieldWrapper\",\n  componentId: \"bfkfnm-0\"\n})([\"display:flex;flex-direction:row;align-items:center;margin-bottom:10px;\"]);\nconst ColorSquare = styled.div.withConfig({\n  displayName: \"theme_form__ColorSquare\",\n  componentId: \"bfkfnm-1\"\n})([\"background-color:\", \";height:15px;width:15px;&:hover{cursor:pointer;}\"], props => props.color);\n\nconst ThemeField = ({\n  textConfig,\n  popColor,\n  displayName,\n  value,\n  fieldKey,\n  updateTheme\n}) => {\n  const fieldRef = useRef(null);\n\n  const getFieldRef = () => {\n    return fieldRef;\n  };\n\n  const {\n    0: pickerOpen,\n    1: setPickerOpen\n  } = useState(false);\n\n  const onChangeComplete = newColor => {\n    updateTheme(fieldKey, newColor.hex);\n    setPickerOpen(false);\n  };\n\n  const onTogglePicker = () => setPickerOpen(!pickerOpen);\n\n  return __jsx(ThemeFieldWrapper, {\n    ref: fieldRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, pickerOpen && __jsx(RelativePop, {\n    height: \"89px\",\n    width: \"245px\",\n    position: {\n      horizontal: 0,\n      vertical: 0\n    },\n    margin: \"20px 0 0 0\",\n    arrowPosition: 3,\n    backgroundColor: popColor,\n    borderColor: \"black\",\n    onClickAway: onTogglePicker,\n    getParentRef: getFieldRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, __jsx(CompactPicker, {\n    color: value,\n    onChangeComplete: onChangeComplete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  })), __jsx(DecoratedText, _extends({}, textConfig, {\n    decoration: {\n      start: __jsx(ColorSquare, {\n        color: value,\n        onClick: onTogglePicker,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 18\n        }\n      }),\n      startWidth: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }), displayName));\n};\n\nconst Button = styled.div.withConfig({\n  displayName: \"theme_form__Button\",\n  componentId: \"bfkfnm-2\"\n})([\"\", \"\"], props => {\n  return `\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-right: 30px;\n    border: 1px solid ${props.borderColor};\n    border-radius: 4px;\n    opacity: 1;\n    background: ${props.backgroundColor} 0% 0% no-repeat padding-box;\n    width: 100px;\n    height: 50px;\n    color: ${props.color};\n    font-size: 18px;\n    font-family: \"Source Sans Pro\", sans-serif;\n    cursor: pointer;\n    margin: 20px 20px 20px 0;\n    &:hover {\n      background-color: ${props.hoverBackground};\n    }`;\n});\nconst ButtonsContainer = styled.div.withConfig({\n  displayName: \"theme_form__ButtonsContainer\",\n  componentId: \"bfkfnm-3\"\n})([\"width:100%;display:flex;\"]);\nconst Input = styled.input.withConfig({\n  displayName: \"theme_form__Input\",\n  componentId: \"bfkfnm-4\"\n})([\"margin:25px;\"]);\nexport const ThemeForm = ({\n  currentTheme,\n  initialValues,\n  onSave,\n  onApply,\n  onDone\n}) => {\n  const {\n    0: themeValues,\n    1: setThemeValues\n  } = useState(initialValues);\n\n  const updateTheme = (fieldKey, newVal) => {\n    setThemeValues(_objectSpread(_objectSpread({}, themeValues), {}, {\n      [fieldKey]: newVal\n    }));\n  };\n\n  const updateName = e => updateTheme(\"name\", e.target.value);\n\n  const fields = Object.keys(themeValues).reduce((result, fieldKey) => {\n    const fieldVal = themeValues[fieldKey];\n    const fieldKeyParts = fieldKey.split(\"_\");\n    const fieldGroup = fieldKeyParts[0];\n    const field = fieldKeyParts[fieldKeyParts.length - 1];\n\n    if (!result[fieldGroup]) {\n      result[fieldGroup] = {};\n    }\n\n    result[fieldGroup][field] = {\n      fieldKey,\n      displayName: field[0].toUpperCase() + field.slice(1),\n      value: fieldVal\n    };\n    return result;\n  }, {});\n  const {\n    text: {\n      styles: {\n        primary: primaryStyle\n      },\n      colors: {\n        primary: primaryColor\n      },\n      sizes: {\n        small\n      }\n    },\n    border: {\n      colors: {\n        primary: primaryBorderColor\n      }\n    },\n    surface: {\n      colors: {\n        primary: primarySurfaceColor\n      }\n    },\n    surface: {\n      colors: {\n        primary: popColor\n      }\n    }\n  } = currentTheme;\n  const fieldTextConfig = {\n    style: primaryStyle,\n    size: small,\n    color: primaryColor\n  };\n\n  const getFieldsByGroup = group => {\n    return Object.keys(group).map(fieldKey => {\n      const field = group[fieldKey];\n      return __jsx(ThemeField, {\n        textConfig: fieldTextConfig,\n        popColor: popColor,\n        displayName: field.displayName,\n        value: field.value,\n        fieldKey: field.fieldKey,\n        updateTheme: updateTheme,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 9\n        }\n      });\n    });\n  };\n\n  const handleSave = () => onSave(themeValues);\n\n  const handleApply = () => onApply(themeValues);\n\n  return __jsx(React.Fragment, null, __jsx(ButtonsContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    color: primaryColor,\n    backgroundColor: primarySurfaceColor,\n    borderColor: primaryBorderColor,\n    onClick: handleApply,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }\n  }, \"Apply\"), __jsx(Button, {\n    color: primaryColor,\n    backgroundColor: primarySurfaceColor,\n    borderColor: primaryBorderColor,\n    onClick: handleSave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }\n  }, \"Save\"), __jsx(Button, {\n    color: primaryColor,\n    backgroundColor: primarySurfaceColor,\n    borderColor: primaryBorderColor,\n    onClick: onDone,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }\n  }, \"Done\")), __jsx(Grid, {\n    numCols: 12,\n    numRows: 4,\n    rowUnit: \"135px\",\n    colUnit: \"56px\",\n    key: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }\n  }, __jsx(GridElement, {\n    position: {\n      startCol: 9,\n      endCol: 13,\n      startRow: 3,\n      endRow: 4\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }\n  }, __jsx(SimpleText, _extends({}, GridElementHeaderProps(currentTheme), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 11\n    }\n  }), \"Background\"), getFieldsByGroup(fields.background)), __jsx(GridElement, {\n    position: {\n      startCol: 5,\n      endCol: 9,\n      startRow: 1,\n      endRow: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }\n  }, __jsx(SimpleText, _extends({}, GridElementHeaderProps(currentTheme), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 11\n    }\n  }), \"Border\"), getFieldsByGroup(fields.border)), __jsx(GridElement, {\n    position: {\n      startCol: 9,\n      endCol: 13,\n      startRow: 1,\n      endRow: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 9\n    }\n  }, __jsx(SimpleText, _extends({}, GridElementHeaderProps(currentTheme), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 11\n    }\n  }), \"Surface\"), getFieldsByGroup(fields.surface)), __jsx(GridElement, {\n    position: {\n      startCol: 1,\n      endCol: 5,\n      startRow: 2,\n      endRow: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 9\n    }\n  }, __jsx(SimpleText, _extends({}, GridElementHeaderProps(currentTheme), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 11\n    }\n  }), \"Text\"), getFieldsByGroup(fields.text)), __jsx(GridElement, {\n    position: {\n      startCol: 5,\n      endCol: 9,\n      startRow: 2,\n      endRow: 4\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 9\n    }\n  }, __jsx(SimpleText, _extends({}, GridElementHeaderProps(currentTheme), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 11\n    }\n  }), \"Icon\"), getFieldsByGroup(fields.icon)), __jsx(GridElement, {\n    position: {\n      startCol: 9,\n      endCol: 13,\n      startRow: 2,\n      endRow: 3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 9\n    }\n  }, __jsx(SimpleText, _extends({}, GridElementHeaderProps(currentTheme), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 11\n    }\n  }), \"Tab\"), getFieldsByGroup(fields.tab)), __jsx(GridElement, {\n    position: {\n      startCol: 1,\n      endCol: 5,\n      startRow: 1,\n      endRow: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 9\n    }\n  }, __jsx(SimpleText, _extends({}, GridElementHeaderProps(currentTheme), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 11\n    }\n  }), \"Name\"), __jsx(Input, {\n    type: \"text\",\n    onChange: updateName,\n    value: fields.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 11\n    }\n  }))));\n};","map":{"version":3,"sources":["/Users/steven/Documents/lootcrate/gimme-the-loot/src/components/Tabs/manage_themes/theme_form.jsx"],"names":["Grid","GridElement","GridElementHeaderProps","SimpleText","DecoratedText","CompactPicker","RelativePop","useState","useRef","styled","ThemeFieldWrapper","div","ColorSquare","props","color","ThemeField","textConfig","popColor","displayName","value","fieldKey","updateTheme","fieldRef","getFieldRef","pickerOpen","setPickerOpen","onChangeComplete","newColor","hex","onTogglePicker","horizontal","vertical","start","startWidth","Button","borderColor","backgroundColor","hoverBackground","ButtonsContainer","Input","input","ThemeForm","currentTheme","initialValues","onSave","onApply","onDone","themeValues","setThemeValues","newVal","updateName","e","target","fields","Object","keys","reduce","result","fieldVal","fieldKeyParts","split","fieldGroup","field","length","toUpperCase","slice","text","styles","primary","primaryStyle","colors","primaryColor","sizes","small","border","primaryBorderColor","surface","primarySurfaceColor","fieldTextConfig","style","size","getFieldsByGroup","group","map","handleSave","handleApply","startCol","endCol","startRow","endRow","background","icon","tab","name"],"mappings":"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","sourcesContent":["import { Grid } from \"../../CoreUI/Grid/Grid\";\nimport { GridElement } from \"../../CoreUI/Grid/GridElement\";\nimport { GridElementHeaderProps } from \"../../../utils/styleUtils/commonTextProps\";\nimport { SimpleText } from \"../../CoreUI/Text/SimpleText\";\nimport { DecoratedText } from \"../../CoreUI/Text/DecoratedText\";\nimport { CompactPicker } from \"react-color\";\nimport { RelativePop } from \"../../CoreUI/Popover/RelativePop\";\nimport { useState, useRef } from \"react\";\nimport styled from \"styled-components\";\n\nconst ThemeFieldWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-bottom: 10px;\n`;\n\nconst ColorSquare = styled.div`\n  background-color: ${(props) => props.color};\n  height: 15px;\n  width: 15px;\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst ThemeField = ({\n  textConfig,\n  popColor,\n  displayName,\n  value,\n  fieldKey,\n  updateTheme,\n}) => {\n  const fieldRef = useRef(null);\n  const getFieldRef = () => {\n    return fieldRef;\n  };\n\n  const [pickerOpen, setPickerOpen] = useState(false);\n\n  const onChangeComplete = (newColor) => {\n    updateTheme(fieldKey, newColor.hex);\n    setPickerOpen(false);\n  };\n\n  const onTogglePicker = () => setPickerOpen(!pickerOpen);\n\n  return (\n    <ThemeFieldWrapper ref={fieldRef}>\n      {pickerOpen && (\n        <RelativePop\n          height=\"89px\"\n          width=\"245px\"\n          position={{\n            horizontal: 0,\n            vertical: 0,\n          }}\n          margin=\"20px 0 0 0\"\n          arrowPosition={3}\n          backgroundColor={popColor}\n          borderColor=\"black\"\n          onClickAway={onTogglePicker}\n          getParentRef={getFieldRef}\n        >\n          <CompactPicker color={value} onChangeComplete={onChangeComplete} />\n        </RelativePop>\n      )}\n      <DecoratedText\n        {...textConfig}\n        decoration={{\n          start: <ColorSquare color={value} onClick={onTogglePicker} />,\n          startWidth: 20,\n        }}\n      >\n        {displayName}\n      </DecoratedText>\n    </ThemeFieldWrapper>\n  );\n};\n\nconst Button = styled.div`\n  ${(props) => {\n    return `\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-right: 30px;\n    border: 1px solid ${props.borderColor};\n    border-radius: 4px;\n    opacity: 1;\n    background: ${props.backgroundColor} 0% 0% no-repeat padding-box;\n    width: 100px;\n    height: 50px;\n    color: ${props.color};\n    font-size: 18px;\n    font-family: \"Source Sans Pro\", sans-serif;\n    cursor: pointer;\n    margin: 20px 20px 20px 0;\n    &:hover {\n      background-color: ${props.hoverBackground};\n    }`;\n  }}\n`;\n\nconst ButtonsContainer = styled.div`\n  width: 100%;\n  display: flex;\n`;\n\nconst Input = styled.input`\n  margin: 25px;\n`;\n\nexport const ThemeForm = ({ currentTheme, initialValues, onSave, onApply, onDone }) => {\n  const [themeValues, setThemeValues] = useState(initialValues);\n\n  const updateTheme = (fieldKey, newVal) => {\n    setThemeValues({\n      ...themeValues,\n      [fieldKey]: newVal,\n    });\n  };\n\n  const updateName = (e) => updateTheme(\"name\", e.target.value);\n\n  const fields = Object.keys(themeValues).reduce((result, fieldKey) => {\n    const fieldVal = themeValues[fieldKey];\n\n    const fieldKeyParts = fieldKey.split(\"_\");\n    const fieldGroup = fieldKeyParts[0];\n    const field = fieldKeyParts[fieldKeyParts.length - 1];\n\n    if (!result[fieldGroup]) {\n      result[fieldGroup] = {};\n    }\n\n    result[fieldGroup][field] = {\n      fieldKey,\n      displayName: field[0].toUpperCase() + field.slice(1),\n      value: fieldVal,\n    };\n\n    return result;\n  }, {});\n\n  const {\n    text: {\n      styles: { primary: primaryStyle },\n      colors: { primary: primaryColor },\n      sizes: { small },\n    },\n    border: {\n      colors: { primary: primaryBorderColor },\n    },\n    surface: {\n      colors: { primary: primarySurfaceColor },\n    },\n    surface: {\n      colors: { primary: popColor },\n    },\n  } = currentTheme;\n\n  const fieldTextConfig = {\n    style: primaryStyle,\n    size: small,\n    color: primaryColor,\n  };\n\n  const getFieldsByGroup = (group) => {\n    return Object.keys(group).map((fieldKey) => {\n      const field = group[fieldKey];\n      return (\n        <ThemeField\n          textConfig={fieldTextConfig}\n          popColor={popColor}\n          displayName={field.displayName}\n          value={field.value}\n          fieldKey={field.fieldKey}\n          updateTheme={updateTheme}\n        />\n      );\n    });\n  };\n\n  const handleSave = () => onSave(themeValues);\n\n  const handleApply = () => onApply(themeValues);\n\n  return (\n    <>\n      <ButtonsContainer>\n      <Button\n          color={primaryColor}\n          backgroundColor={primarySurfaceColor}\n          borderColor={primaryBorderColor}\n          onClick={handleApply}\n        >\n          Apply\n        </Button>\n        <Button\n          color={primaryColor}\n          backgroundColor={primarySurfaceColor}\n          borderColor={primaryBorderColor}\n          onClick={handleSave}\n        >\n          Save\n        </Button>\n        <Button\n          color={primaryColor}\n          backgroundColor={primarySurfaceColor}\n          borderColor={primaryBorderColor}\n          onClick={onDone}\n        >\n          Done\n        </Button>\n      </ButtonsContainer>\n      <Grid numCols={12} numRows={4} rowUnit=\"135px\" colUnit=\"56px\" key={1}>\n        <GridElement\n          position={{\n            startCol: 9,\n            endCol: 13,\n            startRow: 3,\n            endRow: 4,\n          }}\n        >\n          <SimpleText {...GridElementHeaderProps(currentTheme)}>\n            Background\n          </SimpleText>\n          {getFieldsByGroup(fields.background)}\n        </GridElement>\n        <GridElement\n          position={{\n            startCol: 5,\n            endCol: 9,\n            startRow: 1,\n            endRow: 2,\n          }}\n        >\n          <SimpleText {...GridElementHeaderProps(currentTheme)}>\n            Border\n          </SimpleText>\n          {getFieldsByGroup(fields.border)}\n        </GridElement>\n        <GridElement\n          position={{\n            startCol: 9,\n            endCol: 13,\n            startRow: 1,\n            endRow: 2,\n          }}\n        >\n          <SimpleText {...GridElementHeaderProps(currentTheme)}>\n            Surface\n          </SimpleText>\n          {getFieldsByGroup(fields.surface)}\n        </GridElement>\n        <GridElement\n          position={{\n            startCol: 1,\n            endCol: 5,\n            startRow: 2,\n            endRow: 5,\n          }}\n        >\n          <SimpleText {...GridElementHeaderProps(currentTheme)}>\n            Text\n          </SimpleText>\n          {getFieldsByGroup(fields.text)}\n        </GridElement>\n        <GridElement\n          position={{\n            startCol: 5,\n            endCol: 9,\n            startRow: 2,\n            endRow: 4,\n          }}\n        >\n          <SimpleText {...GridElementHeaderProps(currentTheme)}>\n            Icon\n          </SimpleText>\n          {getFieldsByGroup(fields.icon)}\n        </GridElement>\n        <GridElement\n          position={{\n            startCol: 9,\n            endCol: 13,\n            startRow: 2,\n            endRow: 3,\n          }}\n        >\n          <SimpleText {...GridElementHeaderProps(currentTheme)}>Tab</SimpleText>\n          {getFieldsByGroup(fields.tab)}\n        </GridElement>\n        <GridElement\n          position={{\n            startCol: 1,\n            endCol: 5,\n            startRow: 1,\n            endRow: 2,\n          }}\n        >\n          <SimpleText {...GridElementHeaderProps(currentTheme)}>Name</SimpleText>\n          <Input type=\"text\" onChange={updateName} value={fields.name} />\n        </GridElement>\n      </Grid>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}