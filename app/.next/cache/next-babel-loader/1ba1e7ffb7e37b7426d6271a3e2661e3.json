{"ast":null,"code":"var _jsxFileName = \"/Users/steven/Documents/lootcrate/gimme-the-loot/src/components/Tabs/theme_form.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Grid } from \"../CoreUI/Grid/Grid\";\nimport { GridElement } from \"../CoreUI/Grid/GridElement\";\nimport { GridElementHeaderProps } from \"../../utils/styleUtils/commonTextProps\";\nimport { SimpleText } from \"../CoreUI/Text/SimpleText\";\nimport { DecoratedText } from \"../CoreUI/Text/Decorated\";\nconst ThemeFieldWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-bottom: 10px;\n`;\nconst ColorSquare = styled.div`\n  background-color: ${props => props.color};\n  height: 15px;\n  width: 15px;\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst ThemeField = ({\n  currentTheme,\n  displayName,\n  value,\n  fieldKey,\n  updateTheme\n}) => {\n  const fieldRef = useRef(null);\n\n  const getFieldRef = () => {\n    return fieldRef;\n  };\n\n  const [pickerOpen, setPickerOpen] = useState(false);\n\n  const onChangeComplete = newColor => {\n    updateTheme(fieldKey, newColor.hex);\n    setPickerOpen(false);\n  };\n\n  const onTogglePicker = () => setPickerOpen(!pickerOpen);\n\n  return __jsx(ThemeFieldWrapper, {\n    ref: fieldRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, __jsx(ColorSquare, {\n    color: value,\n    onClick: onTogglePicker,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }), pickerOpen && __jsx(RelativePop, {\n    height: \"89px\",\n    width: \"245px\",\n    position: {\n      horizontal: 7.5,\n      vertical: 0\n    },\n    margin: \"20px 0 0 0\",\n    arrowPosition: 3,\n    backgroundColor: currentTheme.surface.colors.primary,\n    borderColor: \"black\",\n    onClickAway: onTogglePicker,\n    getParentRef: getFieldRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, __jsx(CompactPicker, {\n    color: value,\n    onChangeComplete: onChangeComplete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  })), __jsx(SimpleText, {\n    color: currentTheme.text.colors.primary,\n    style: currentTheme.text.styles.primary,\n    size: currentTheme.text.sizes.large,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, displayName));\n};\n\nexport const ThemeForm = ({\n  currentTheme,\n  fields\n}) => {\n  const [themeValues, setThemeValues] = useState(initialValues);\n\n  const updateTheme = (fieldKey, newVal) => {\n    setThemeValues(_objectSpread(_objectSpread({}, themeValues), {}, {\n      [fieldKey]: newVal\n    }));\n  };\n\n  const {\n    text: {\n      styles: {\n        primary: primaryStyle\n      },\n      colors: {\n        primary: primaryColor\n      },\n      sizes: {\n        small\n      }\n    }\n  } = currentTheme;\n  const fieldTextConfig = {\n    style: primaryStyle,\n    size: small,\n    color: primaryColor\n  };\n  return __jsx(Grid, {\n    numCols: 12,\n    numRows: 3,\n    rowUnit: \"135px\",\n    colUnit: \"56px\",\n    key: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, __jsx(GridElement, {\n    position: {\n      startCol: 1,\n      endCol: 5,\n      startRow: 1,\n      endRow: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, __jsx(SimpleText, _extends({}, GridElementHeaderProps(currentTheme), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }), \"Background\")), __jsx(GridElement, {\n    position: {\n      startCol: 5,\n      endCol: 9,\n      startRow: 1,\n      endRow: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, __jsx(SimpleText, _extends({}, GridElementHeaderProps(currentTheme), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 8\n    }\n  }), \"Border\")), __jsx(GridElement, {\n    position: {\n      startCol: 9,\n      endCol: 13,\n      startRow: 1,\n      endRow: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, __jsx(SimpleText, _extends({}, GridElementHeaderProps(currentTheme), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 8\n    }\n  }), \"Surface\")), __jsx(GridElement, {\n    position: {\n      startCol: 1,\n      endCol: 5,\n      startRow: 2,\n      endRow: 4\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, __jsx(SimpleText, _extends({}, GridElementHeaderProps(currentTheme), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 8\n    }\n  }), \"Text\")), __jsx(GridElement, {\n    position: {\n      startCol: 5,\n      endCol: 9,\n      startRow: 2,\n      endRow: 4\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, __jsx(SimpleText, _extends({}, GridElementHeaderProps(currentTheme), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 8\n    }\n  }), \"Icon\")), __jsx(GridElement, {\n    position: {\n      startCol: 9,\n      endCol: 13,\n      startRow: 2,\n      endRow: 3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }, __jsx(SimpleText, _extends({}, GridElementHeaderProps(currentTheme), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 8\n    }\n  }), \"Tab\")));\n};","map":{"version":3,"sources":["/Users/steven/Documents/lootcrate/gimme-the-loot/src/components/Tabs/theme_form.jsx"],"names":["Grid","GridElement","GridElementHeaderProps","SimpleText","DecoratedText","ThemeFieldWrapper","styled","div","ColorSquare","props","color","ThemeField","currentTheme","displayName","value","fieldKey","updateTheme","fieldRef","useRef","getFieldRef","pickerOpen","setPickerOpen","useState","onChangeComplete","newColor","hex","onTogglePicker","horizontal","vertical","surface","colors","primary","text","styles","sizes","large","ThemeForm","fields","themeValues","setThemeValues","initialValues","newVal","primaryStyle","primaryColor","small","fieldTextConfig","style","size","startCol","endCol","startRow","endRow"],"mappings":"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","sourcesContent":["import { Grid } from \"../CoreUI/Grid/Grid\";\nimport { GridElement } from \"../CoreUI/Grid/GridElement\";\nimport { GridElementHeaderProps } from \"../../utils/styleUtils/commonTextProps\";\nimport { SimpleText } from \"../CoreUI/Text/SimpleText\";\nimport { DecoratedText } from \"../CoreUI/Text/Decorated\";\n\nconst ThemeFieldWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-bottom: 10px;\n`;\n\nconst ColorSquare = styled.div`\n  background-color: ${(props) => props.color};\n  height: 15px;\n  width: 15px;\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst ThemeField = ({\n    currentTheme,\n    displayName,\n    value,\n    fieldKey,\n    updateTheme,\n  }) => {\n    const fieldRef = useRef(null);\n    const getFieldRef = () => {\n      return fieldRef;\n    };\n  \n    const [pickerOpen, setPickerOpen] = useState(false);\n  \n    const onChangeComplete = (newColor) => {\n      updateTheme(fieldKey, newColor.hex);\n      setPickerOpen(false);\n    };\n  \n    const onTogglePicker = () => setPickerOpen(!pickerOpen);\n  \n    return (\n      <ThemeFieldWrapper ref={fieldRef}>\n        <ColorSquare color={value} onClick={onTogglePicker} />\n        {pickerOpen && (\n          <RelativePop\n            height=\"89px\"\n            width=\"245px\"\n            position={{\n              horizontal: 7.5,\n              vertical: 0,\n            }}\n            margin=\"20px 0 0 0\"\n            arrowPosition={3}\n            backgroundColor={currentTheme.surface.colors.primary}\n            borderColor=\"black\"\n            onClickAway={onTogglePicker}\n            getParentRef={getFieldRef}\n          >\n            <CompactPicker color={value} onChangeComplete={onChangeComplete} />\n          </RelativePop>\n        )}\n        <SimpleText\n          color={currentTheme.text.colors.primary}\n          style={currentTheme.text.styles.primary}\n          size={currentTheme.text.sizes.large}\n        >\n          {displayName}\n        </SimpleText>\n      </ThemeFieldWrapper>\n    );\n  };\n\n\nexport const ThemeForm = ({ currentTheme, fields }) => {\n    const [themeValues, setThemeValues] = useState(initialValues);\n\n    const updateTheme = (fieldKey, newVal) => {\n      setThemeValues({\n        ...themeValues,\n        [fieldKey]: newVal,\n      });\n    };\n\n    const {\n        text: {\n          styles: { primary: primaryStyle },\n          colors: {\n            primary: primaryColor,\n          },\n          sizes: { small },\n        },\n      } = currentTheme;\n\n      const fieldTextConfig = {\n        style: primaryStyle,\n        size: small,\n        color: primaryColor,\n      };\n\n  return (\n    <Grid numCols={12} numRows={3} rowUnit=\"135px\" colUnit=\"56px\" key={1}>\n      <GridElement\n        position={{\n          startCol: 1,\n          endCol: 5,\n          startRow: 1,\n          endRow: 2,\n        }}\n      >\n        <SimpleText {...GridElementHeaderProps(currentTheme)}>Background</SimpleText>\n      </GridElement>\n      <GridElement\n        position={{\n          startCol: 5,\n          endCol: 9,\n          startRow: 1,\n          endRow: 2,\n        }}\n      ><SimpleText {...GridElementHeaderProps(currentTheme)}>Border</SimpleText></GridElement>\n      <GridElement\n        position={{\n          startCol: 9,\n          endCol: 13,\n          startRow: 1,\n          endRow: 2,\n        }}\n      ><SimpleText {...GridElementHeaderProps(currentTheme)}>Surface</SimpleText></GridElement>\n      <GridElement\n        position={{\n          startCol: 1,\n          endCol: 5,\n          startRow: 2,\n          endRow: 4,\n        }}\n      ><SimpleText {...GridElementHeaderProps(currentTheme)}>Text</SimpleText></GridElement>\n      <GridElement\n        position={{\n          startCol: 5,\n          endCol: 9,\n          startRow: 2,\n          endRow: 4,\n        }}\n      ><SimpleText {...GridElementHeaderProps(currentTheme)}>Icon</SimpleText></GridElement>\n      <GridElement\n        position={{\n          startCol: 9,\n          endCol: 13,\n          startRow: 2,\n          endRow: 3,\n        }}\n      ><SimpleText {...GridElementHeaderProps(currentTheme)}>Tab</SimpleText></GridElement>\n    </Grid>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}