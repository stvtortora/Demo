{"ast":null,"code":"export var getCSS = function getCSS(property, value) {\n  return value ? \"\".concat(property, \": \").concat(value, \";\") : \"\";\n};\nexport var sanitizeNumericVals = function sanitizeNumericVals(vals) {\n  var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"px\";\n\n  if (vals) {\n    return Object.keys(vals).reduce(function (sanitized, key) {\n      var val = vals[key];\n      var sanitizedVal = val;\n\n      if (typeof val === \"number\") {\n        sanitizedVal = \"\".concat(val).concat(unit);\n      }\n\n      if (typeof sanitizedVal === \"string\") {\n        sanitized[key] = sanitizedVal;\n      }\n\n      return sanitized;\n    }, {});\n  }\n\n  return {};\n};\nexport var centerMixin = \"\\n      display: flex;\\n      justify-content: center;\\n      align-items: center;\\n  \";","map":{"version":3,"sources":["/Users/steven/Documents/demo/gimme-the-loot/src/utils/styleUtils/generalCSSUtils.js"],"names":["getCSS","property","value","sanitizeNumericVals","vals","unit","Object","keys","reduce","sanitized","key","val","sanitizedVal","centerMixin"],"mappings":"AAAA,OAAO,IAAMA,MAAM,GAAG,SAATA,MAAS,CAACC,QAAD,EAAWC,KAAX,EAAqB;AACzC,SAAOA,KAAK,aAAMD,QAAN,eAAmBC,KAAnB,SAA8B,EAA1C;AACD,CAFM;AAIP,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,IAAD,EAAuB;AAAA,MAAhBC,IAAgB,uEAAT,IAAS;;AACxD,MAAID,IAAJ,EAAU;AACR,WAAOE,MAAM,CAACC,IAAP,CAAYH,IAAZ,EAAkBI,MAAlB,CAAyB,UAACC,SAAD,EAAYC,GAAZ,EAAoB;AAClD,UAAMC,GAAG,GAAGP,IAAI,CAACM,GAAD,CAAhB;AACA,UAAIE,YAAY,GAAGD,GAAnB;;AACA,UAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3BC,QAAAA,YAAY,aAAMD,GAAN,SAAYN,IAAZ,CAAZ;AACD;;AACD,UAAI,OAAOO,YAAP,KAAwB,QAA5B,EAAsC;AACpCH,QAAAA,SAAS,CAACC,GAAD,CAAT,GAAiBE,YAAjB;AACD;;AACD,aAAOH,SAAP;AACD,KAVM,EAUJ,EAVI,CAAP;AAWD;;AAED,SAAO,EAAP;AACD,CAhBM;AAkBP,OAAO,IAAMI,WAAW,2FAAjB","sourcesContent":["export const getCSS = (property, value) => {\n  return value ? `${property}: ${value};` : \"\";\n};\n\nexport const sanitizeNumericVals = (vals, unit = \"px\") => {\n  if (vals) {\n    return Object.keys(vals).reduce((sanitized, key) => {\n      const val = vals[key];\n      let sanitizedVal = val;\n      if (typeof val === \"number\") {\n        sanitizedVal = `${val}${unit}`;\n      }\n      if (typeof sanitizedVal === \"string\") {\n        sanitized[key] = sanitizedVal;\n      }\n      return sanitized;\n    }, {});\n  }\n\n  return {};\n};\n\nexport const centerMixin = `\n      display: flex;\n      justify-content: center;\n      align-items: center;\n  `;\n"]},"metadata":{},"sourceType":"module"}