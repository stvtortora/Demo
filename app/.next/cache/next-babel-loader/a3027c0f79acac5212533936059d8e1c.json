{"ast":null,"code":"var _jsxFileName = \"/Users/steven/Documents/lootcrate/gimme-the-loot/src/components/Tabs/manage_themes.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { GridElement } from \"../CoreUI/Grid/GridElement\";\nimport { Grid } from \"../CoreUI/Grid/Grid\";\nimport { TabSectionHeaderProps, GridElementHeaderProps } from \"../../utils/styleUtils/commonTextProps\";\nimport { SimpleText } from \"../CoreUI/Text/SimpleText\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport styled from \"styled-components\";\nimport { useState } from \"react\";\nimport { SketchPicker } from 'react-color';\nconst ThemeListWrapper = styled.div.withConfig({\n  displayName: \"manage_themes__ThemeListWrapper\",\n  componentId: \"npadpy-0\"\n})([\"display:flex;flex-direction:column;justify-content:center;align-items:center;border-top:\", \";\"], props => `1px solid ${props.border}`);\n\nconst ThemeList = ({\n  theme\n}) => {\n  return __jsx(ThemeListWrapper, {\n    border: theme.border.colors.primary,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, __jsx(FontAwesomeIcon, {\n    icon: faPlusCircle,\n    color: theme.icon.colors.other.c,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }), __jsx(SimpleText, _extends({}, GridElementHeaderProps(theme), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }), \"Default\"), __jsx(SimpleText, _extends({}, GridElementHeaderProps(theme), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }), \"Theme 1\"));\n};\n\nconst Fields = ({\n  update,\n  themeOptions\n}) => {\n  __jsx(FieldsWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 3\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, \"Order Name \", __jsx(\"span\", {\n    className: \"required-field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 20\n    }\n  }, \"*\")), __jsx(\"input\", {\n    type: \"text\",\n    value: state.name,\n    name: \"name\",\n    onChange: update(\"name\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  })), __jsx(\"label\", {\n    htmlFor: \"data_package_type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, \"Data Package Type \", __jsx(\"span\", {\n    className: \"required-field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 27\n    }\n  }, \"*\")), __jsx(\"select\", {\n    value: state.data_package_type,\n    name: \"data_package_type\",\n    onChange: update(\"data_package_type\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, __jsx(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }), __jsx(\"option\", {\n    value: \"Device Location\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, \"Device Location\"), __jsx(\"option\", {\n    value: \"Device Behavior\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, \"Device Behavior\"), __jsx(\"option\", {\n    value: \"ID Mapping\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, \"ID Mapping\"))), __jsx(\"label\", {\n    htmlFor: \"max_bid_price\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, \"Max Bid Price \", __jsx(\"span\", {\n    className: \"required-field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 23\n    }\n  }, \"*\")), __jsx(\"input\", {\n    type: \"number\",\n    min: \"0\",\n    max: \"1000000000000000\",\n    step: \"0.01\",\n    value: state.max_bid_price,\n    name: \"max_bid_price\",\n    onChange: update(\"max_bid_price\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  })));\n};\n\nconst ThemeFormWrapper = styled.div.withConfig({\n  displayName: \"manage_themes__ThemeFormWrapper\",\n  componentId: \"npadpy-1\"\n})([\"display:flex;flex-direction:column;justify-content:center;margin:20px;\"]);\n\nconst ThemeOption = ({\n  displayName,\n  value,\n  optionKey,\n  updateVal\n}) => {\n  const onChangeComplete = newColor => {\n    updateVal(optionKey, newColor);\n  };\n\n  return __jsx(ThemeOptionWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 10\n    }\n  }, __jsx(SimpleText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, displayName), __jsx(SketchPicker, {\n    color: value,\n    onChangeComplete: onChangeComplete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }));\n};\n\nconst ThemeForm = ({\n  theme,\n  formType\n}) => {\n  const {\n    0: themeOptions,\n    1: setThemeOptions\n  } = useState(theme);\n\n  const updateTheme = (optionKey, newVal) => {\n    setThemeOptions(_objectSpread(_objectSpread({}, themeOptions), {}, {\n      [optionKey]: newVal\n    }));\n  };\n\n  return __jsx(ThemeFormWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, __jsx(ThemeOption, {\n    name: theme.color.displayName,\n    value: theme.color.value,\n    optionKey: \"color\",\n    updateTheme: updateTheme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport const ManageThemes = ({\n  theme,\n  setTheme\n}) => {\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }, __jsx(SimpleText, _extends({}, TabSectionHeaderProps(theme), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }), \"Manage Themes\"), __jsx(Grid, {\n    numCols: 16,\n    numRows: 9,\n    rowUnit: \"28px\",\n    colUnit: \"28px\",\n    key: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, __jsx(GridElement, {\n    position: {\n      startCol: 1,\n      endCol: 17,\n      startRow: 1,\n      endRow: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, __jsx(ThemeList, {\n    theme: {\n      color: {\n        value: \"red\",\n        displayName: \"Color\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }))));\n};","map":{"version":3,"sources":["/Users/steven/Documents/lootcrate/gimme-the-loot/src/components/Tabs/manage_themes.jsx"],"names":["GridElement","Grid","TabSectionHeaderProps","GridElementHeaderProps","SimpleText","faPlusCircle","FontAwesomeIcon","styled","useState","SketchPicker","ThemeListWrapper","div","props","border","ThemeList","theme","colors","primary","icon","other","c","Fields","update","themeOptions","state","name","data_package_type","max_bid_price","ThemeFormWrapper","ThemeOption","displayName","value","optionKey","updateVal","onChangeComplete","newColor","ThemeForm","formType","setThemeOptions","updateTheme","newVal","color","ManageThemes","setTheme","startCol","endCol","startRow","endRow"],"mappings":"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","sourcesContent":["import { GridElement } from \"../CoreUI/Grid/GridElement\";\nimport { Grid } from \"../CoreUI/Grid/Grid\";\nimport {\n  TabSectionHeaderProps,\n  GridElementHeaderProps,\n} from \"../../utils/styleUtils/commonTextProps\";\nimport { SimpleText } from \"../CoreUI/Text/SimpleText\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport styled from \"styled-components\";\nimport { useState } from \"react\";\nimport { SketchPicker } from 'react-color';\n\nconst ThemeListWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  border-top: ${(props) => `1px solid ${props.border}`};\n`;\n\nconst ThemeList = ({ theme }) => {\n  return (\n    <ThemeListWrapper border={theme.border.colors.primary}>\n      <FontAwesomeIcon icon={faPlusCircle} color={theme.icon.colors.other.c} />\n      <SimpleText {...GridElementHeaderProps(theme)}>Default</SimpleText>\n      <SimpleText {...GridElementHeaderProps(theme)}>Theme 1</SimpleText>\n    </ThemeListWrapper>\n  );\n};\n\nconst Fields = ({ update, themeOptions }) => {\n  <FieldsWrapper>\n    <label htmlFor=\"name\">\n      <span>\n        Order Name <span className=\"required-field\">*</span>\n      </span>\n      <input\n        type=\"text\"\n        value={state.name}\n        name=\"name\"\n        onChange={update(\"name\")}\n      />\n    </label>\n\n    <label htmlFor=\"data_package_type\">\n      <span>\n        Data Package Type <span className=\"required-field\">*</span>\n      </span>\n      <select\n        value={state.data_package_type}\n        name=\"data_package_type\"\n        onChange={update(\"data_package_type\")}\n      >\n        <option value=\"\"></option>\n        <option value=\"Device Location\">Device Location</option>\n        <option value=\"Device Behavior\">Device Behavior</option>\n        <option value=\"ID Mapping\">ID Mapping</option>\n      </select>\n    </label>\n\n    <label htmlFor=\"max_bid_price\">\n      <span>\n        Max Bid Price <span className=\"required-field\">*</span>\n      </span>\n      <input\n        type=\"number\"\n        min=\"0\"\n        max=\"1000000000000000\"\n        step=\"0.01\"\n        value={state.max_bid_price}\n        name=\"max_bid_price\"\n        onChange={update(\"max_bid_price\")}\n      />\n    </label>\n  </FieldsWrapper>;\n};\n\nconst ThemeFormWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin: 20px;\n`;\n\nconst ThemeOption = ({ displayName, value, optionKey, updateVal }) => {\n  const onChangeComplete = (newColor) => {\n    updateVal(optionKey, newColor);\n  }\n\n  return <ThemeOptionWrapper>\n    <SimpleText>{displayName}</SimpleText>\n    <SketchPicker color={value} onChangeComplete={onChangeComplete} />\n  </ThemeOptionWrapper>\n}\n\nconst ThemeForm = ({ theme, formType }) => {\n  const [themeOptions, setThemeOptions] = useState(theme);\n\n  const updateTheme = (optionKey, newVal) => {\n    setThemeOptions({\n      ...themeOptions,\n      [optionKey]: newVal\n    });\n  }\n\n  return (\n    <ThemeFormWrapper>\n      <ThemeOption name={theme.color.displayName} value={theme.color.value} optionKey={\"color\"} updateTheme={updateTheme}></ThemeOption>\n    </ThemeFormWrapper>\n  );\n};\n\nexport const ManageThemes = ({ theme, setTheme }) => {\n  return (\n    <React.Fragment>\n      <SimpleText {...TabSectionHeaderProps(theme)}>Manage Themes</SimpleText>\n      <Grid numCols={16} numRows={9} rowUnit=\"28px\" colUnit=\"28px\" key={0}>\n        <GridElement\n          position={{\n            startCol: 1,\n            endCol: 17,\n            startRow: 1,\n            endRow: 10,\n          }}\n        >\n          <ThemeList theme={{ color: { value: \"red\", displayName: \"Color\" } }} />\n        </GridElement>\n      </Grid>\n    </React.Fragment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}