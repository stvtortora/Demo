{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { DefaultTheme } from \"./DefaultTheme\";\n\nconst addField = (fieldKeyArray, value, theme) => {\n  const currentKey = fieldKeyArray[0];\n\n  if (fieldKeyArray.length === 1) {\n    return {\n      [currentKey]: value\n    };\n  }\n\n  if (!theme[currentKey]) {\n    theme[currentKey] = {};\n  }\n\n  theme[currentKey] = _objectSpread(_objectSpread({}, theme[currentKey]), addField(fieldKeyArray.slice(1), value, theme[currentKey]));\n  return theme;\n};\n\nexport default (themeFields => {\n  const generatedFields = Object.keys(themeFields).reduce((result, fieldKey) => {\n    result = addField(fieldKey.split(\"_\"), themeFields[fieldKey], result);\n    return result;\n  }, {});\n  generatedFields.text = _objectSpread({\n    sizes: DefaultTheme.text.sizes,\n    styles: DefaultTheme.text.styles\n  }, generatedFields.text);\n  generatedFields.surface.boxShadows.primary = \"0px 2px 6px \" + generatedFields.surface.boxShadows.primary;\n  return generatedFields;\n});","map":{"version":3,"sources":["/Users/steven/Documents/lootcrate/gimme-the-loot/src/themes/buildTheme.jsx"],"names":["DefaultTheme","addField","fieldKeyArray","value","theme","currentKey","length","slice","themeFields","generatedFields","Object","keys","reduce","result","fieldKey","split","text","sizes","styles","surface","boxShadows","primary"],"mappings":";;;;;;AAAA,SAASA,YAAT,QAA6B,gBAA7B;;AAEA,MAAMC,QAAQ,GAAG,CAACC,aAAD,EAAgBC,KAAhB,EAAuBC,KAAvB,KAAiC;AAChD,QAAMC,UAAU,GAAGH,aAAa,CAAC,CAAD,CAAhC;;AAEA,MAAIA,aAAa,CAACI,MAAd,KAAyB,CAA7B,EAAgC;AAC9B,WAAO;AAAE,OAACD,UAAD,GAAcF;AAAhB,KAAP;AACD;;AAED,MAAI,CAACC,KAAK,CAACC,UAAD,CAAV,EAAwB;AACtBD,IAAAA,KAAK,CAACC,UAAD,CAAL,GAAoB,EAApB;AACD;;AAEDD,EAAAA,KAAK,CAACC,UAAD,CAAL,mCACKD,KAAK,CAACC,UAAD,CADV,GAEKJ,QAAQ,CAACC,aAAa,CAACK,KAAd,CAAoB,CAApB,CAAD,EAAyBJ,KAAzB,EAAgCC,KAAK,CAACC,UAAD,CAArC,CAFb;AAKA,SAAOD,KAAP;AACD,CAjBD;;AAmBA,gBAAgBI,WAAD,IAAiB;AAC9B,QAAMC,eAAe,GAAGC,MAAM,CAACC,IAAP,CAAYH,WAAZ,EAAyBI,MAAzB,CACtB,CAACC,MAAD,EAASC,QAAT,KAAsB;AACpBD,IAAAA,MAAM,GAAGZ,QAAQ,CAACa,QAAQ,CAACC,KAAT,CAAe,GAAf,CAAD,EAAsBP,WAAW,CAACM,QAAD,CAAjC,EAA6CD,MAA7C,CAAjB;AAEA,WAAOA,MAAP;AACD,GALqB,EAMtB,EANsB,CAAxB;AASAJ,EAAAA,eAAe,CAACO,IAAhB;AACEC,IAAAA,KAAK,EAAEjB,YAAY,CAACgB,IAAb,CAAkBC,KAD3B;AAEEC,IAAAA,MAAM,EAAElB,YAAY,CAACgB,IAAb,CAAkBE;AAF5B,KAGKT,eAAe,CAACO,IAHrB;AAMAP,EAAAA,eAAe,CAACU,OAAhB,CAAwBC,UAAxB,CAAmCC,OAAnC,GACE,iBAAiBZ,eAAe,CAACU,OAAhB,CAAwBC,UAAxB,CAAmCC,OADtD;AAGA,SAAOZ,eAAP;AACD,CApBD","sourcesContent":["import { DefaultTheme } from \"./DefaultTheme\";\n\nconst addField = (fieldKeyArray, value, theme) => {\n  const currentKey = fieldKeyArray[0];\n\n  if (fieldKeyArray.length === 1) {\n    return { [currentKey]: value };\n  }\n\n  if (!theme[currentKey]) {\n    theme[currentKey] = {};\n  }\n\n  theme[currentKey] = {\n    ...theme[currentKey],\n    ...addField(fieldKeyArray.slice(1), value, theme[currentKey]),\n  };\n\n  return theme;\n};\n\nexport default (themeFields) => {\n  const generatedFields = Object.keys(themeFields).reduce(\n    (result, fieldKey) => {\n      result = addField(fieldKey.split(\"_\"), themeFields[fieldKey], result);\n\n      return result;\n    },\n    {}\n  );\n\n  generatedFields.text = {\n    sizes: DefaultTheme.text.sizes,\n    styles: DefaultTheme.text.styles,\n    ...generatedFields.text,\n  };\n\n  generatedFields.surface.boxShadows.primary =\n    \"0px 2px 6px \" + generatedFields.surface.boxShadows.primary;\n\n  return generatedFields;\n};\n"]},"metadata":{},"sourceType":"module"}