{"ast":null,"code":"var _jsxFileName = \"/Users/steven/Documents/demo/demo_app/src/hooks/CatchOutside.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRef, useEffect } from \"react\";\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nconst BackgroundDiv = styled.div.withConfig({\n  displayName: \"CatchOutside__BackgroundDiv\",\n  componentId: \"w3j5fe-0\"\n})([\"position:relative;z-index:11;\"]);\n/**\n * Hook that alerts clicks outside of the passed ref\n */\n\nfunction useOutsideAlerter(ref, handler, getParentRef) {\n  useEffect(() => {\n    /**\n     * Alert if clicked on outside of element\n     */\n    function handleClickOutside(event) {\n      event.preventDefault();\n\n      if (ref.current && !ref.current.contains(event.target)) {\n        if (getParentRef) {\n          let elem = getParentRef();\n\n          if (!elem.current.contains(event.target)) {\n            handler();\n          }\n        } else {\n          handler();\n        }\n      }\n    } // Bind the event listener\n\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [ref]);\n}\n\nconst CatchOutside = ({\n  children,\n  handler,\n  getParentRef\n}) => {\n  const wrapperRef = useRef(null);\n  useOutsideAlerter(wrapperRef, handler, getParentRef);\n  return __jsx(BackgroundDiv, {\n    ref: wrapperRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 12\n    }\n  }, children);\n};\n\nCatchOutside.propTypes = {\n  children: PropTypes.any,\n  handler: PropTypes.func,\n  getParentRef: PropTypes.func\n};\nexport default CatchOutside;","map":{"version":3,"sources":["/Users/steven/Documents/demo/demo_app/src/hooks/CatchOutside.jsx"],"names":["useRef","useEffect","PropTypes","styled","BackgroundDiv","div","useOutsideAlerter","ref","handler","getParentRef","handleClickOutside","event","preventDefault","current","contains","target","elem","document","addEventListener","removeEventListener","CatchOutside","children","wrapperRef","propTypes","any","func"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,aAAa,GAAGD,MAAM,CAACE,GAAV;AAAA;AAAA;AAAA,qCAAnB;AAKA;;;;AAGA,SAASC,iBAAT,CAA2BC,GAA3B,EAAgCC,OAAhC,EAAyCC,YAAzC,EAAuD;AAEnDR,EAAAA,SAAS,CAAC,MAAM;AACZ;;;AAGA,aAASS,kBAAT,CAA4BC,KAA5B,EAAmC;AAC/BA,MAAAA,KAAK,CAACC,cAAN;;AACA,UAAIL,GAAG,CAACM,OAAJ,IAAe,CAACN,GAAG,CAACM,OAAJ,CAAYC,QAAZ,CAAqBH,KAAK,CAACI,MAA3B,CAApB,EAAwD;AACpD,YAAIN,YAAJ,EAAkB;AACd,cAAIO,IAAI,GAAGP,YAAY,EAAvB;;AACA,cAAI,CAACO,IAAI,CAACH,OAAL,CAAaC,QAAb,CAAsBH,KAAK,CAACI,MAA5B,CAAL,EAA0C;AACtCP,YAAAA,OAAO;AACV;AACJ,SALD,MAKO;AACHA,UAAAA,OAAO;AACV;AACJ;AACJ,KAhBW,CAkBZ;;;AACAS,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCR,kBAAvC;AACA,WAAO,MAAM;AACT;AACAO,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,WAA7B,EAA0CT,kBAA1C;AACH,KAHD;AAIH,GAxBQ,EAwBN,CAACH,GAAD,CAxBM,CAAT;AAyBH;;AAED,MAAMa,YAAY,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYb,EAAAA,OAAZ;AAAqBC,EAAAA;AAArB,CAAD,KAAyC;AAC1D,QAAMa,UAAU,GAAGtB,MAAM,CAAC,IAAD,CAAzB;AACAM,EAAAA,iBAAiB,CAACgB,UAAD,EAAad,OAAb,EAAsBC,YAAtB,CAAjB;AAEA,SAAO,MAAC,aAAD;AAAe,IAAA,GAAG,EAAEa,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCD,QAAjC,CAAP;AACH,CALD;;AAOAD,YAAY,CAACG,SAAb,GAAyB;AACrBF,EAAAA,QAAQ,EAAEnB,SAAS,CAACsB,GADC;AAErBhB,EAAAA,OAAO,EAAEN,SAAS,CAACuB,IAFE;AAGrBhB,EAAAA,YAAY,EAAEP,SAAS,CAACuB;AAHH,CAAzB;AAMA,eAAeL,YAAf","sourcesContent":["import { useRef, useEffect } from \"react\";\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst BackgroundDiv = styled.div`\n  position: relative;\n  z-index: 11;\n`;\n\n/**\n * Hook that alerts clicks outside of the passed ref\n */\nfunction useOutsideAlerter(ref, handler, getParentRef) {\n\n    useEffect(() => {\n        /**\n         * Alert if clicked on outside of element\n         */\n        function handleClickOutside(event) {\n            event.preventDefault();\n            if (ref.current && !ref.current.contains(event.target)) {\n                if (getParentRef) {\n                    let elem = getParentRef();\n                    if (!elem.current.contains(event.target)) {\n                        handler();\n                    }\n                } else {\n                    handler();\n                }\n            }\n        }\n\n        // Bind the event listener\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            // Unbind the event listener on clean up\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [ref]);\n}\n\nconst CatchOutside = ({ children, handler, getParentRef }) => {\n    const wrapperRef = useRef(null);\n    useOutsideAlerter(wrapperRef, handler, getParentRef);\n\n    return <BackgroundDiv ref={wrapperRef}>{children}</BackgroundDiv>;\n}\n\nCatchOutside.propTypes = {\n    children: PropTypes.any,\n    handler: PropTypes.func,\n    getParentRef: PropTypes.func\n}\n\nexport default CatchOutside;"]},"metadata":{},"sourceType":"module"}