{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/steven/Documents/lootcrate/gimme-the-loot/src/components/Tabs/dashboard.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { GridElement } from \"../CoreUI/Grid/GridElement\";\nimport { Grid } from \"../CoreUI/Grid/Grid\";\nimport { Chart } from \"../CoreUI/Chart/Chart\";\nimport { SimpleText } from \"../CoreUI/Text/SimpleText\";\nimport { GridElementHeaderProps } from \"../../utils/styleUtils/commonTextProps\";\nimport { MultiText } from \"../CoreUI/Text/MultiText\";\nimport styled from \"styled-components\";\nimport { centerMixin } from \"../../utils/styleUtils/generalCSSUtils\";\nimport { TabSectionHeaderProps } from \"../../utils/styleUtils/commonTextProps\";\nimport { useStats } from \"../../hooks/useStats\";\n\nvar StreamPerformanceChart = function StreamPerformanceChart(_ref) {\n  var dailyViews = _ref.dailyViews;\n  var Monday = dailyViews.Monday,\n      Tuesday = dailyViews.Tuesday,\n      Wednesday = dailyViews.Wednesday,\n      Thursday = dailyViews.Thursday,\n      Friday = dailyViews.Friday,\n      Saturday = dailyViews.Saturday,\n      Sunday = dailyViews.Sunday;\n  return __jsx(Chart, {\n    chartConfig: {\n      chart: {\n        type: \"column\"\n      },\n      title: {\n        text: null\n      },\n      legend: {\n        verticalAlign: \"top\"\n      },\n      xAxis: {\n        categories: [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"],\n        crosshair: true\n      },\n      yAxis: {\n        min: 0,\n        title: {\n          text: null\n        }\n      },\n      tooltip: {\n        headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n        pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' + '<td style=\"padding:0\"><b>{point.y:.1f} mm</b></td></tr>',\n        footerFormat: \"</table>\",\n        shared: true,\n        useHTML: true\n      },\n      plotOptions: {\n        column: {\n          pointPadding: 0.2,\n          borderWidth: 0\n        }\n      },\n      series: [{\n        name: \"Average Viewers\",\n        color: \"#A4A1FB\",\n        data: [Monday.total, Tuesday.total, Wednesday.total, Thursday.total, Friday.total, Saturday.total, Sunday.total]\n      }, {\n        name: \"Unique Viewers\",\n        color: \"#56D9FE\",\n        data: [Monday.unique, Tuesday.unique, Wednesday.unique, Thursday.unique, Friday.unique, Saturday.unique, Sunday.unique]\n      }],\n      credits: {\n        enabled: false\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  });\n};\n\n_c = StreamPerformanceChart;\n\nvar ViewSourceDistributionChart = function ViewSourceDistributionChart(_ref2) {\n  var followers = _ref2.followers,\n      searches = _ref2.searches,\n      channels = _ref2.channels,\n      other = _ref2.other;\n  return __jsx(Chart, {\n    chartConfig: {\n      chart: {\n        type: \"pie\"\n      },\n      title: {\n        text: null\n      },\n      legend: {\n        align: \"right\",\n        layout: \"vertical\",\n        verticalAlign: \"middle\",\n        itemMarginBottom: 12\n      },\n      plotOptions: {\n        pie: {\n          shadow: false,\n          center: [\"50%\", \"50%\"],\n          showInLegend: true\n        }\n      },\n      tooltip: {\n        valueSuffix: \"%\"\n      },\n      series: [{\n        name: \"Distribution\",\n        data: [{\n          name: \"Followers\",\n          y: followers,\n          color: \"blue\"\n        }, {\n          name: \"Searches\",\n          y: searches,\n          color: \"red\"\n        }, {\n          name: \"Other\",\n          y: other,\n          color: \"green\"\n        }, {\n          name: \"Channels\",\n          y: channels,\n          color: \"purple\"\n        }],\n        size: \"80%\",\n        innerSize: \"60%\",\n        dataLabels: {\n          enabled: false\n        },\n        id: \"distribution\"\n      }],\n      responsive: {\n        rules: [{\n          condition: {},\n          chartOptions: {\n            series: [{}, {\n              id: \"versions\",\n              dataLabels: {\n                enabled: false\n              }\n            }]\n          }\n        }]\n      },\n      credits: {\n        enabled: false\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  });\n};\n\n_c2 = ViewSourceDistributionChart;\nvar SingleStatMetricWrapper = styled.div.withConfig({\n  displayName: \"dashboard__SingleStatMetricWrapper\",\n  componentId: \"sc-1ff8fht-0\"\n})([\"\", \" flex-direction:column;height:100%;\"], centerMixin);\n_c3 = SingleStatMetricWrapper;\n\nvar SingleStatMetric = function SingleStatMetric(_ref3) {\n  var _ref3$textTheme = _ref3.textTheme,\n      styles = _ref3$textTheme.styles,\n      sizes = _ref3$textTheme.sizes,\n      colors = _ref3$textTheme.colors,\n      percentChangeColor = _ref3.percentChangeColor,\n      textData = _ref3.textData;\n  return __jsx(SingleStatMetricWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 5\n    }\n  }, __jsx(MultiText, {\n    textConfigs: [{\n      content: textData[0],\n      style: styles.primary,\n      size: sizes.medium,\n      color: colors.secondary,\n      moreStyles: \"opacity: 50%\"\n    }, {\n      content: textData[1],\n      style: styles.bold,\n      size: sizes.xxlarge,\n      color: colors.primary,\n      weight: 700\n    }, {\n      content: textData[2],\n      style: styles.bold,\n      size: sizes.xsmall,\n      color: percentChangeColor,\n      weight: 700\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }\n  }));\n};\n\n_c4 = SingleStatMetric;\nexport var Dashboard = function Dashboard(_ref4) {\n  _s();\n\n  var theme = _ref4.theme;\n\n  var _useStats = useStats(),\n      stats = _useStats.stats,\n      errors = _useStats.errors;\n\n  if (!stats) {\n    if (errors) {\n      return __jsx(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 14\n        }\n      }, \"Error loading stats\");\n    }\n\n    return __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  return __jsx(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 5\n    }\n  }, __jsx(SimpleText, _extends({}, TabSectionHeaderProps(theme), {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }\n  }), \"Stream Overview\"), __jsx(Grid, {\n    numCols: 12,\n    numRows: 4,\n    rowUnit: \"135px\",\n    colUnit: \"56px\",\n    key: 1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }\n  }, __jsx(GridElement, {\n    position: {\n      startCol: 1,\n      endCol: 7,\n      startRow: 2,\n      endRow: 4\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 9\n    }\n  }, __jsx(SimpleText, _extends({}, GridElementHeaderProps(theme), {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 11\n    }\n  }), \"View Source Distribution\"), __jsx(ViewSourceDistributionChart, {\n    followers: stats.followers,\n    searches: stats.searches,\n    channels: stats.channels,\n    other: stats.other,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 11\n    }\n  })), __jsx(GridElement, {\n    position: {\n      startCol: 7,\n      endCol: 13,\n      startRow: 2,\n      endRow: 4\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 9\n    }\n  }, __jsx(SimpleText, _extends({}, GridElementHeaderProps(theme), {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 11\n    }\n  }), \"Stream Performance\"), __jsx(StreamPerformanceChart, {\n    dailyViews: stats.daily_views,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 11\n    }\n  })), __jsx(GridElement, {\n    position: {\n      startCol: 1,\n      endCol: 5,\n      startRow: 1,\n      endRow: 2\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }\n  }, __jsx(SingleStatMetric, {\n    textData: [\"Total Views\", stats.total_views, \"13%\"],\n    textTheme: theme.text,\n    percentChangeColor: theme.text.colors.other.e,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 11\n    }\n  })), __jsx(GridElement, {\n    position: {\n      startCol: 5,\n      endCol: 9,\n      startRow: 1,\n      endRow: 2\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 9\n    }\n  }, __jsx(SingleStatMetric, {\n    textData: [\"Engagements\", stats.engagements, \"12%\"],\n    textTheme: theme.text,\n    percentChangeColor: theme.text.colors.other.e,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 11\n    }\n  })), __jsx(GridElement, {\n    position: {\n      startCol: 9,\n      endCol: 13,\n      startRow: 1,\n      endRow: 2\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 9\n    }\n  }, __jsx(SingleStatMetric, {\n    textData: [\"Follower Reach\", stats.followers, \"12%\"],\n    textTheme: theme.text,\n    percentChangeColor: theme.text.colors.other.e,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 11\n    }\n  })), __jsx(GridElement, {\n    position: {\n      startCol: 1,\n      endCol: 5,\n      startRow: 4,\n      endRow: 5\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 9\n    }\n  }, __jsx(SingleStatMetric, {\n    textData: [\"Total Views\", stats.total_views, \"13%\"],\n    textTheme: theme.text,\n    percentChangeColor: theme.text.colors.other.e,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 11\n    }\n  })), __jsx(GridElement, {\n    position: {\n      startCol: 5,\n      endCol: 9,\n      startRow: 4,\n      endRow: 5\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 9\n    }\n  }, __jsx(SingleStatMetric, {\n    textData: [\"Engagements\", stats.engagements, \"12%\"],\n    textTheme: theme.text,\n    percentChangeColor: theme.text.colors.other.e,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 11\n    }\n  })), __jsx(GridElement, {\n    position: {\n      startCol: 9,\n      endCol: 13,\n      startRow: 4,\n      endRow: 5\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 9\n    }\n  }, __jsx(SingleStatMetric, {\n    textData: [\"Follower Reach\", stats.followers, \"12%\"],\n    textTheme: theme.text,\n    percentChangeColor: theme.text.colors.other.e,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 11\n    }\n  }))));\n};\n\n_s(Dashboard, \"8bm5vNgbPXfN8P4cWhs4H6arVi8=\", false, function () {\n  return [useStats];\n});\n\n_c5 = Dashboard;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"StreamPerformanceChart\");\n$RefreshReg$(_c2, \"ViewSourceDistributionChart\");\n$RefreshReg$(_c3, \"SingleStatMetricWrapper\");\n$RefreshReg$(_c4, \"SingleStatMetric\");\n$RefreshReg$(_c5, \"Dashboard\");","map":{"version":3,"sources":["/Users/steven/Documents/lootcrate/gimme-the-loot/src/components/Tabs/dashboard.jsx"],"names":["GridElement","Grid","Chart","SimpleText","GridElementHeaderProps","MultiText","styled","centerMixin","TabSectionHeaderProps","useStats","StreamPerformanceChart","dailyViews","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday","chart","type","title","text","legend","verticalAlign","xAxis","categories","crosshair","yAxis","min","tooltip","headerFormat","pointFormat","footerFormat","shared","useHTML","plotOptions","column","pointPadding","borderWidth","series","name","color","data","total","unique","credits","enabled","ViewSourceDistributionChart","followers","searches","channels","other","align","layout","itemMarginBottom","pie","shadow","center","showInLegend","valueSuffix","y","size","innerSize","dataLabels","id","responsive","rules","condition","chartOptions","SingleStatMetricWrapper","div","SingleStatMetric","textTheme","styles","sizes","colors","percentChangeColor","textData","content","style","primary","medium","secondary","moreStyles","bold","xxlarge","weight","xsmall","Dashboard","theme","stats","errors","startCol","endCol","startRow","endRow","daily_views","total_views","e","engagements"],"mappings":";;;;;;;;AAAA,SAASA,WAAT,QAA4B,4BAA5B;AACA,SAASC,IAAT,QAAqB,qBAArB;AACA,SAASC,KAAT,QAAsB,uBAAtB;AACA,SAASC,UAAT,QAA2B,2BAA3B;AACA,SAASC,sBAAT,QAAuC,wCAAvC;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,WAAT,QAA4B,wCAA5B;AACA,SAASC,qBAAT,QAAsC,wCAAtC;AACA,SAASC,QAAT,QAAyB,sBAAzB;;AAEA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,OAAoB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;AAAA,MAE/CC,MAF+C,GAS7CD,UAT6C,CAE/CC,MAF+C;AAAA,MAG/CC,OAH+C,GAS7CF,UAT6C,CAG/CE,OAH+C;AAAA,MAI/CC,SAJ+C,GAS7CH,UAT6C,CAI/CG,SAJ+C;AAAA,MAK/CC,QAL+C,GAS7CJ,UAT6C,CAK/CI,QAL+C;AAAA,MAM/CC,MAN+C,GAS7CL,UAT6C,CAM/CK,MAN+C;AAAA,MAO/CC,QAP+C,GAS7CN,UAT6C,CAO/CM,QAP+C;AAAA,MAQ/CC,MAR+C,GAS7CP,UAT6C,CAQ/CO,MAR+C;AAUjD,SACE,MAAC,KAAD;AACE,IAAA,WAAW,EAAE;AACXC,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAE;AADD,OADI;AAIXC,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAE;AADD,OAJI;AAOXC,MAAAA,MAAM,EAAE;AACNC,QAAAA,aAAa,EAAE;AADT,OAPG;AAUXC,MAAAA,KAAK,EAAE;AACLC,QAAAA,UAAU,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,CADP;AAELC,QAAAA,SAAS,EAAE;AAFN,OAVI;AAcXC,MAAAA,KAAK,EAAE;AACLC,QAAAA,GAAG,EAAE,CADA;AAELR,QAAAA,KAAK,EAAE;AACLC,UAAAA,IAAI,EAAE;AADD;AAFF,OAdI;AAoBXQ,MAAAA,OAAO,EAAE;AACPC,QAAAA,YAAY,EACV,wDAFK;AAGPC,QAAAA,WAAW,EACT,wEACA,yDALK;AAMPC,QAAAA,YAAY,EAAE,UANP;AAOPC,QAAAA,MAAM,EAAE,IAPD;AAQPC,QAAAA,OAAO,EAAE;AARF,OApBE;AA8BXC,MAAAA,WAAW,EAAE;AACXC,QAAAA,MAAM,EAAE;AACNC,UAAAA,YAAY,EAAE,GADR;AAENC,UAAAA,WAAW,EAAE;AAFP;AADG,OA9BF;AAoCXC,MAAAA,MAAM,EAAE,CACN;AACEC,QAAAA,IAAI,EAAE,iBADR;AAEEC,QAAAA,KAAK,EAAE,SAFT;AAGEC,QAAAA,IAAI,EAAE,CACJ/B,MAAM,CAACgC,KADH,EAEJ/B,OAAO,CAAC+B,KAFJ,EAGJ9B,SAAS,CAAC8B,KAHN,EAIJ7B,QAAQ,CAAC6B,KAJL,EAKJ5B,MAAM,CAAC4B,KALH,EAMJ3B,QAAQ,CAAC2B,KANL,EAOJ1B,MAAM,CAAC0B,KAPH;AAHR,OADM,EAcN;AACEH,QAAAA,IAAI,EAAE,gBADR;AAEEC,QAAAA,KAAK,EAAE,SAFT;AAGEC,QAAAA,IAAI,EAAE,CACJ/B,MAAM,CAACiC,MADH,EAEJhC,OAAO,CAACgC,MAFJ,EAGJ/B,SAAS,CAAC+B,MAHN,EAIJ9B,QAAQ,CAAC8B,MAJL,EAKJ7B,MAAM,CAAC6B,MALH,EAMJ5B,QAAQ,CAAC4B,MANL,EAOJ3B,MAAM,CAAC2B,MAPH;AAHR,OAdM,CApCG;AAgEXC,MAAAA,OAAO,EAAE;AACPC,QAAAA,OAAO,EAAE;AADF;AAhEE,KADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAwED,CAlFD;;KAAMrC,sB;;AAoFN,IAAMsC,2BAA2B,GAAG,SAA9BA,2BAA8B,QAK9B;AAAA,MAJJC,SAII,SAJJA,SAII;AAAA,MAHJC,QAGI,SAHJA,QAGI;AAAA,MAFJC,QAEI,SAFJA,QAEI;AAAA,MADJC,KACI,SADJA,KACI;AACJ,SACE,MAAC,KAAD;AACE,IAAA,WAAW,EAAE;AACXjC,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAE;AADD,OADI;AAIXC,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAE;AADD,OAJI;AAOXC,MAAAA,MAAM,EAAE;AACN8B,QAAAA,KAAK,EAAE,OADD;AAENC,QAAAA,MAAM,EAAE,UAFF;AAGN9B,QAAAA,aAAa,EAAE,QAHT;AAIN+B,QAAAA,gBAAgB,EAAE;AAJZ,OAPG;AAaXnB,MAAAA,WAAW,EAAE;AACXoB,QAAAA,GAAG,EAAE;AACHC,UAAAA,MAAM,EAAE,KADL;AAEHC,UAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,KAAR,CAFL;AAGHC,UAAAA,YAAY,EAAE;AAHX;AADM,OAbF;AAoBX7B,MAAAA,OAAO,EAAE;AACP8B,QAAAA,WAAW,EAAE;AADN,OApBE;AAuBXpB,MAAAA,MAAM,EAAE,CACN;AACEC,QAAAA,IAAI,EAAE,cADR;AAEEE,QAAAA,IAAI,EAAE,CACJ;AAAEF,UAAAA,IAAI,EAAE,WAAR;AAAqBoB,UAAAA,CAAC,EAAEZ,SAAxB;AAAmCP,UAAAA,KAAK,EAAE;AAA1C,SADI,EAEJ;AAAED,UAAAA,IAAI,EAAE,UAAR;AAAoBoB,UAAAA,CAAC,EAAEX,QAAvB;AAAiCR,UAAAA,KAAK,EAAE;AAAxC,SAFI,EAGJ;AAAED,UAAAA,IAAI,EAAE,OAAR;AAAiBoB,UAAAA,CAAC,EAAET,KAApB;AAA2BV,UAAAA,KAAK,EAAE;AAAlC,SAHI,EAIJ;AAAED,UAAAA,IAAI,EAAE,UAAR;AAAoBoB,UAAAA,CAAC,EAAEV,QAAvB;AAAiCT,UAAAA,KAAK,EAAE;AAAxC,SAJI,CAFR;AAQEoB,QAAAA,IAAI,EAAE,KARR;AASEC,QAAAA,SAAS,EAAE,KATb;AAUEC,QAAAA,UAAU,EAAE;AACVjB,UAAAA,OAAO,EAAE;AADC,SAVd;AAaEkB,QAAAA,EAAE,EAAE;AAbN,OADM,CAvBG;AAwCXC,MAAAA,UAAU,EAAE;AACVC,QAAAA,KAAK,EAAE,CACL;AACEC,UAAAA,SAAS,EAAE,EADb;AAEEC,UAAAA,YAAY,EAAE;AACZ7B,YAAAA,MAAM,EAAE,CACN,EADM,EAEN;AACEyB,cAAAA,EAAE,EAAE,UADN;AAEED,cAAAA,UAAU,EAAE;AACVjB,gBAAAA,OAAO,EAAE;AADC;AAFd,aAFM;AADI;AAFhB,SADK;AADG,OAxCD;AA0DXD,MAAAA,OAAO,EAAE;AACPC,QAAAA,OAAO,EAAE;AADF;AA1DE,KADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAkED,CAxED;;MAAMC,2B;AA0EN,IAAMsB,uBAAuB,GAAGhE,MAAM,CAACiE,GAAV;AAAA;AAAA;AAAA,gDACzBhE,WADyB,CAA7B;MAAM+D,uB;;AAMN,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,QAInB;AAAA,8BAHJC,SAGI;AAAA,MAHSC,MAGT,mBAHSA,MAGT;AAAA,MAHiBC,KAGjB,mBAHiBA,KAGjB;AAAA,MAHwBC,MAGxB,mBAHwBA,MAGxB;AAAA,MAFJC,kBAEI,SAFJA,kBAEI;AAAA,MADJC,QACI,SADJA,QACI;AACJ,SACE,MAAC,uBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AACE,IAAA,WAAW,EAAE,CACX;AACEC,MAAAA,OAAO,EAAED,QAAQ,CAAC,CAAD,CADnB;AAEEE,MAAAA,KAAK,EAAEN,MAAM,CAACO,OAFhB;AAGEnB,MAAAA,IAAI,EAAEa,KAAK,CAACO,MAHd;AAIExC,MAAAA,KAAK,EAAEkC,MAAM,CAACO,SAJhB;AAKEC,MAAAA,UAAU,EAAE;AALd,KADW,EAQX;AACEL,MAAAA,OAAO,EAAED,QAAQ,CAAC,CAAD,CADnB;AAEEE,MAAAA,KAAK,EAAEN,MAAM,CAACW,IAFhB;AAGEvB,MAAAA,IAAI,EAAEa,KAAK,CAACW,OAHd;AAIE5C,MAAAA,KAAK,EAAEkC,MAAM,CAACK,OAJhB;AAKEM,MAAAA,MAAM,EAAE;AALV,KARW,EAeX;AACER,MAAAA,OAAO,EAAED,QAAQ,CAAC,CAAD,CADnB;AAEEE,MAAAA,KAAK,EAAEN,MAAM,CAACW,IAFhB;AAGEvB,MAAAA,IAAI,EAAEa,KAAK,CAACa,MAHd;AAIE9C,MAAAA,KAAK,EAAEmC,kBAJT;AAKEU,MAAAA,MAAM,EAAE;AALV,KAfW,CADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AA6BD,CAlCD;;MAAMf,gB;AAoCN,OAAO,IAAMiB,SAAS,GAAG,SAAZA,SAAY,QAAe;AAAA;;AAAA,MAAZC,KAAY,SAAZA,KAAY;;AAAA,kBACZjF,QAAQ,EADI;AAAA,MAC9BkF,KAD8B,aAC9BA,KAD8B;AAAA,MACvBC,MADuB,aACvBA,MADuB;;AAGtC,MAAI,CAACD,KAAL,EAAY;AACV,QAAIC,MAAJ,EAAY;AACV,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAP;AACD;;AACD,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD;;AAED,SACE,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD,eAAgBpF,qBAAqB,CAACkF,KAAD,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEE,MAAC,IAAD;AAAM,IAAA,OAAO,EAAE,EAAf;AAAmB,IAAA,OAAO,EAAE,CAA5B;AAA+B,IAAA,OAAO,EAAC,OAAvC;AAA+C,IAAA,OAAO,EAAC,MAAvD;AAA8D,IAAA,GAAG,EAAE,CAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD;AACE,IAAA,QAAQ,EAAE;AACRG,MAAAA,QAAQ,EAAE,CADF;AAERC,MAAAA,MAAM,EAAE,CAFA;AAGRC,MAAAA,QAAQ,EAAE,CAHF;AAIRC,MAAAA,MAAM,EAAE;AAJA,KADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,MAAC,UAAD,eAAgB5F,sBAAsB,CAACsF,KAAD,CAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCARF,EAWE,MAAC,2BAAD;AACE,IAAA,SAAS,EAAEC,KAAK,CAAC1C,SADnB;AAEE,IAAA,QAAQ,EAAE0C,KAAK,CAACzC,QAFlB;AAGE,IAAA,QAAQ,EAAEyC,KAAK,CAACxC,QAHlB;AAIE,IAAA,KAAK,EAAEwC,KAAK,CAACvC,KAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CADF,EAmBE,MAAC,WAAD;AACE,IAAA,QAAQ,EAAE;AACRyC,MAAAA,QAAQ,EAAE,CADF;AAERC,MAAAA,MAAM,EAAE,EAFA;AAGRC,MAAAA,QAAQ,EAAE,CAHF;AAIRC,MAAAA,MAAM,EAAE;AAJA,KADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,MAAC,UAAD,eAAgB5F,sBAAsB,CAACsF,KAAD,CAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BARF,EAWE,MAAC,sBAAD;AAAwB,IAAA,UAAU,EAAEC,KAAK,CAACM,WAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CAnBF,EAgCE,MAAC,WAAD;AACE,IAAA,QAAQ,EAAE;AACRJ,MAAAA,QAAQ,EAAE,CADF;AAERC,MAAAA,MAAM,EAAE,CAFA;AAGRC,MAAAA,QAAQ,EAAE,CAHF;AAIRC,MAAAA,MAAM,EAAE;AAJA,KADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,MAAC,gBAAD;AACE,IAAA,QAAQ,EAAE,CAAC,aAAD,EAAgBL,KAAK,CAACO,WAAtB,EAAmC,KAAnC,CADZ;AAEE,IAAA,SAAS,EAAER,KAAK,CAACpE,IAFnB;AAGE,IAAA,kBAAkB,EAAEoE,KAAK,CAACpE,IAAN,CAAWsD,MAAX,CAAkBxB,KAAlB,CAAwB+C,CAH9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CAhCF,EA8CE,MAAC,WAAD;AACE,IAAA,QAAQ,EAAE;AACRN,MAAAA,QAAQ,EAAE,CADF;AAERC,MAAAA,MAAM,EAAE,CAFA;AAGRC,MAAAA,QAAQ,EAAE,CAHF;AAIRC,MAAAA,MAAM,EAAE;AAJA,KADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,MAAC,gBAAD;AACE,IAAA,QAAQ,EAAE,CAAC,aAAD,EAAgBL,KAAK,CAACS,WAAtB,EAAmC,KAAnC,CADZ;AAEE,IAAA,SAAS,EAAEV,KAAK,CAACpE,IAFnB;AAGE,IAAA,kBAAkB,EAAEoE,KAAK,CAACpE,IAAN,CAAWsD,MAAX,CAAkBxB,KAAlB,CAAwB+C,CAH9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CA9CF,EA4DE,MAAC,WAAD;AACE,IAAA,QAAQ,EAAE;AACRN,MAAAA,QAAQ,EAAE,CADF;AAERC,MAAAA,MAAM,EAAE,EAFA;AAGRC,MAAAA,QAAQ,EAAE,CAHF;AAIRC,MAAAA,MAAM,EAAE;AAJA,KADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,MAAC,gBAAD;AACE,IAAA,QAAQ,EAAE,CAAC,gBAAD,EAAmBL,KAAK,CAAC1C,SAAzB,EAAoC,KAApC,CADZ;AAEE,IAAA,SAAS,EAAEyC,KAAK,CAACpE,IAFnB;AAGE,IAAA,kBAAkB,EAAEoE,KAAK,CAACpE,IAAN,CAAWsD,MAAX,CAAkBxB,KAAlB,CAAwB+C,CAH9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CA5DF,EA0EE,MAAC,WAAD;AACE,IAAA,QAAQ,EAAE;AACRN,MAAAA,QAAQ,EAAE,CADF;AAERC,MAAAA,MAAM,EAAE,CAFA;AAGRC,MAAAA,QAAQ,EAAE,CAHF;AAIRC,MAAAA,MAAM,EAAE;AAJA,KADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,MAAC,gBAAD;AACE,IAAA,QAAQ,EAAE,CAAC,aAAD,EAAgBL,KAAK,CAACO,WAAtB,EAAmC,KAAnC,CADZ;AAEE,IAAA,SAAS,EAAER,KAAK,CAACpE,IAFnB;AAGE,IAAA,kBAAkB,EAAEoE,KAAK,CAACpE,IAAN,CAAWsD,MAAX,CAAkBxB,KAAlB,CAAwB+C,CAH9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CA1EF,EAwFE,MAAC,WAAD;AACE,IAAA,QAAQ,EAAE;AACRN,MAAAA,QAAQ,EAAE,CADF;AAERC,MAAAA,MAAM,EAAE,CAFA;AAGRC,MAAAA,QAAQ,EAAE,CAHF;AAIRC,MAAAA,MAAM,EAAE;AAJA,KADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,MAAC,gBAAD;AACE,IAAA,QAAQ,EAAE,CAAC,aAAD,EAAgBL,KAAK,CAACS,WAAtB,EAAmC,KAAnC,CADZ;AAEE,IAAA,SAAS,EAAEV,KAAK,CAACpE,IAFnB;AAGE,IAAA,kBAAkB,EAAEoE,KAAK,CAACpE,IAAN,CAAWsD,MAAX,CAAkBxB,KAAlB,CAAwB+C,CAH9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CAxFF,EAsGE,MAAC,WAAD;AACE,IAAA,QAAQ,EAAE;AACRN,MAAAA,QAAQ,EAAE,CADF;AAERC,MAAAA,MAAM,EAAE,EAFA;AAGRC,MAAAA,QAAQ,EAAE,CAHF;AAIRC,MAAAA,MAAM,EAAE;AAJA,KADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,MAAC,gBAAD;AACE,IAAA,QAAQ,EAAE,CAAC,gBAAD,EAAmBL,KAAK,CAAC1C,SAAzB,EAAoC,KAApC,CADZ;AAEE,IAAA,SAAS,EAAEyC,KAAK,CAACpE,IAFnB;AAGE,IAAA,kBAAkB,EAAEoE,KAAK,CAACpE,IAAN,CAAWsD,MAAX,CAAkBxB,KAAlB,CAAwB+C,CAH9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CAtGF,CAFF,CADF;AA0HD,CApIM;;GAAMV,S;UACehF,Q;;;MADfgF,S","sourcesContent":["import { GridElement } from \"../CoreUI/Grid/GridElement\";\nimport { Grid } from \"../CoreUI/Grid/Grid\";\nimport { Chart } from \"../CoreUI/Chart/Chart\";\nimport { SimpleText } from \"../CoreUI/Text/SimpleText\";\nimport { GridElementHeaderProps } from \"../../utils/styleUtils/commonTextProps\";\nimport { MultiText } from \"../CoreUI/Text/MultiText\";\nimport styled from \"styled-components\";\nimport { centerMixin } from \"../../utils/styleUtils/generalCSSUtils\";\nimport { TabSectionHeaderProps } from \"../../utils/styleUtils/commonTextProps\";\nimport { useStats } from \"../../hooks/useStats\";\n\nconst StreamPerformanceChart = ({ dailyViews }) => {\n  const {\n    Monday,\n    Tuesday,\n    Wednesday,\n    Thursday,\n    Friday,\n    Saturday,\n    Sunday,\n  } = dailyViews;\n  return (\n    <Chart\n      chartConfig={{\n        chart: {\n          type: \"column\",\n        },\n        title: {\n          text: null,\n        },\n        legend: {\n          verticalAlign: \"top\",\n        },\n        xAxis: {\n          categories: [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"],\n          crosshair: true,\n        },\n        yAxis: {\n          min: 0,\n          title: {\n            text: null,\n          },\n        },\n        tooltip: {\n          headerFormat:\n            '<span style=\"font-size:10px\">{point.key}</span><table>',\n          pointFormat:\n            '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\n            '<td style=\"padding:0\"><b>{point.y:.1f} mm</b></td></tr>',\n          footerFormat: \"</table>\",\n          shared: true,\n          useHTML: true,\n        },\n        plotOptions: {\n          column: {\n            pointPadding: 0.2,\n            borderWidth: 0,\n          },\n        },\n        series: [\n          {\n            name: \"Average Viewers\",\n            color: \"#A4A1FB\",\n            data: [\n              Monday.total,\n              Tuesday.total,\n              Wednesday.total,\n              Thursday.total,\n              Friday.total,\n              Saturday.total,\n              Sunday.total,\n            ],\n          },\n          {\n            name: \"Unique Viewers\",\n            color: \"#56D9FE\",\n            data: [\n              Monday.unique,\n              Tuesday.unique,\n              Wednesday.unique,\n              Thursday.unique,\n              Friday.unique,\n              Saturday.unique,\n              Sunday.unique,\n            ],\n          },\n        ],\n        credits: {\n          enabled: false,\n        },\n      }}\n    />\n  );\n};\n\nconst ViewSourceDistributionChart = ({\n  followers,\n  searches,\n  channels,\n  other,\n}) => {\n  return (\n    <Chart\n      chartConfig={{\n        chart: {\n          type: \"pie\",\n        },\n        title: {\n          text: null,\n        },\n        legend: {\n          align: \"right\",\n          layout: \"vertical\",\n          verticalAlign: \"middle\",\n          itemMarginBottom: 12,\n        },\n        plotOptions: {\n          pie: {\n            shadow: false,\n            center: [\"50%\", \"50%\"],\n            showInLegend: true,\n          },\n        },\n        tooltip: {\n          valueSuffix: \"%\",\n        },\n        series: [\n          {\n            name: \"Distribution\",\n            data: [\n              { name: \"Followers\", y: followers, color: \"blue\" },\n              { name: \"Searches\", y: searches, color: \"red\" },\n              { name: \"Other\", y: other, color: \"green\" },\n              { name: \"Channels\", y: channels, color: \"purple\" },\n            ],\n            size: \"80%\",\n            innerSize: \"60%\",\n            dataLabels: {\n              enabled: false,\n            },\n            id: \"distribution\",\n          },\n        ],\n        responsive: {\n          rules: [\n            {\n              condition: {},\n              chartOptions: {\n                series: [\n                  {},\n                  {\n                    id: \"versions\",\n                    dataLabels: {\n                      enabled: false,\n                    },\n                  },\n                ],\n              },\n            },\n          ],\n        },\n        credits: {\n          enabled: false,\n        },\n      }}\n    />\n  );\n};\n\nconst SingleStatMetricWrapper = styled.div`\n  ${centerMixin}\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst SingleStatMetric = ({\n  textTheme: { styles, sizes, colors },\n  percentChangeColor,\n  textData,\n}) => {\n  return (\n    <SingleStatMetricWrapper>\n      <MultiText\n        textConfigs={[\n          {\n            content: textData[0],\n            style: styles.primary,\n            size: sizes.medium,\n            color: colors.secondary,\n            moreStyles: \"opacity: 50%\",\n          },\n          {\n            content: textData[1],\n            style: styles.bold,\n            size: sizes.xxlarge,\n            color: colors.primary,\n            weight: 700,\n          },\n          {\n            content: textData[2],\n            style: styles.bold,\n            size: sizes.xsmall,\n            color: percentChangeColor,\n            weight: 700,\n          },\n        ]}\n      />\n    </SingleStatMetricWrapper>\n  );\n};\n\nexport const Dashboard = ({ theme }) => {\n  const { stats, errors } = useStats();\n\n  if (!stats) {\n    if (errors) {\n      return <div>Error loading stats</div>\n    }\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <React.Fragment>\n      <SimpleText {...TabSectionHeaderProps(theme)}>Stream Overview</SimpleText>\n      <Grid numCols={12} numRows={4} rowUnit=\"135px\" colUnit=\"56px\" key={1}>\n        <GridElement\n          position={{\n            startCol: 1,\n            endCol: 7,\n            startRow: 2,\n            endRow: 4,\n          }}\n        >\n          <SimpleText {...GridElementHeaderProps(theme)}>\n            View Source Distribution\n          </SimpleText>\n          <ViewSourceDistributionChart\n            followers={stats.followers}\n            searches={stats.searches}\n            channels={stats.channels}\n            other={stats.other}\n          />\n        </GridElement>\n        <GridElement\n          position={{\n            startCol: 7,\n            endCol: 13,\n            startRow: 2,\n            endRow: 4,\n          }}\n        >\n          <SimpleText {...GridElementHeaderProps(theme)}>\n            Stream Performance\n          </SimpleText>\n          <StreamPerformanceChart dailyViews={stats.daily_views} />\n        </GridElement>\n        <GridElement\n          position={{\n            startCol: 1,\n            endCol: 5,\n            startRow: 1,\n            endRow: 2,\n          }}\n        >\n          <SingleStatMetric\n            textData={[\"Total Views\", stats.total_views, \"13%\"]}\n            textTheme={theme.text}\n            percentChangeColor={theme.text.colors.other.e}\n          />\n        </GridElement>\n        <GridElement\n          position={{\n            startCol: 5,\n            endCol: 9,\n            startRow: 1,\n            endRow: 2,\n          }}\n        >\n          <SingleStatMetric\n            textData={[\"Engagements\", stats.engagements, \"12%\"]}\n            textTheme={theme.text}\n            percentChangeColor={theme.text.colors.other.e}\n          />\n        </GridElement>\n        <GridElement\n          position={{\n            startCol: 9,\n            endCol: 13,\n            startRow: 1,\n            endRow: 2,\n          }}\n        >\n          <SingleStatMetric\n            textData={[\"Follower Reach\", stats.followers, \"12%\"]}\n            textTheme={theme.text}\n            percentChangeColor={theme.text.colors.other.e}\n          />\n        </GridElement>\n        <GridElement\n          position={{\n            startCol: 1,\n            endCol: 5,\n            startRow: 4,\n            endRow: 5,\n          }}\n        >\n          <SingleStatMetric\n            textData={[\"Total Views\", stats.total_views, \"13%\"]}\n            textTheme={theme.text}\n            percentChangeColor={theme.text.colors.other.e}\n          />\n        </GridElement>\n        <GridElement\n          position={{\n            startCol: 5,\n            endCol: 9,\n            startRow: 4,\n            endRow: 5,\n          }}\n        >\n          <SingleStatMetric\n            textData={[\"Engagements\", stats.engagements, \"12%\"]}\n            textTheme={theme.text}\n            percentChangeColor={theme.text.colors.other.e}\n          />\n        </GridElement>\n        <GridElement\n          position={{\n            startCol: 9,\n            endCol: 13,\n            startRow: 4,\n            endRow: 5,\n          }}\n        >\n          <SingleStatMetric\n            textData={[\"Follower Reach\", stats.followers, \"12%\"]}\n            textTheme={theme.text}\n            percentChangeColor={theme.text.colors.other.e}\n          />\n        </GridElement>\n      </Grid>\n    </React.Fragment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}