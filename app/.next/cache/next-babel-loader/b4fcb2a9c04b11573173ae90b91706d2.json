{"ast":null,"code":"var _jsxFileName = \"/Users/steven/Documents/lootcrate/gimme-the-loot/src/components/Tabs/manage_themes/manage_themes.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { TabSectionHeaderProps } from \"../../../utils/styleUtils/commonTextProps\";\nimport { SimpleText } from \"../../CoreUI/Text/SimpleText\";\nimport { useState } from \"react\";\nimport { useThemeOptions } from \"../../../hooks/useThemeOptions\";\nimport { ThemeForm } from \"./theme_form\";\nimport buildTheme from \"../../../themes/buildTheme\";\nimport { ThemeListView } from \"./theme_list\";\nexport const ManageThemes = ({\n  theme: currentTheme,\n  setTheme\n}) => {\n  const {\n    0: selectedThemeFormValues,\n    1: setSelectedThemeFormValues\n  } = useState(null); // const { themeOptions, onUpdateTheme, onCreateTheme, onDeleteTheme } = useThemeOptions();\n\n  const {\n    0: themeOptions,\n    1: setThemeOptions\n  } = useState();\n  useEffect(() => {\n    const callGetThemes = async () => {\n      const options = await getThemes();\n      setThemeOptions(options);\n    };\n\n    callGetThemes();\n  }, []);\n\n  const onUpdateTheme = async theme => {\n    const updatedTheme = await updateTheme(theme);\n    const updatedThemeOptions = themeOptions.map(theme => theme.id !== updatedTheme.id ? theme : updatedTheme);\n    setThemeOptions(updatedThemeOptions);\n  };\n\n  const onCreateTheme = async theme => {\n    const newTheme = await createTheme(theme);\n    const updatedThemeOptions = themeOptions.concat([newTheme]);\n    setThemeOptions(updatedThemeOptions);\n  };\n\n  const onDeleteTheme = async themeId => {\n    await deleteTheme(themeId);\n    const updatedThemeOptions = themeOptions.filter(theme => theme.id !== themeId);\n    setThemeOptions(updatedThemeOptions);\n  };\n\n  const selectThemeForm = formFields => {\n    setSelectedThemeFormValues(formFields);\n  };\n\n  const saveTheme = theme => {\n    if (theme.id) {\n      onUpdateTheme(theme);\n    } else {\n      onCreateTheme(theme);\n    }\n  };\n\n  const applyTheme = theme => {\n    const builtTheme = buildTheme(theme);\n    setTheme(builtTheme);\n  };\n\n  const closeForm = () => {\n    setSelectedThemeFormValues(null);\n  };\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, __jsx(SimpleText, _extends({}, TabSectionHeaderProps(currentTheme), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }), \"Manage Themes\"), selectedThemeFormValues ? __jsx(ThemeForm, {\n    currentTheme: currentTheme,\n    initialValues: selectedThemeFormValues,\n    onSave: saveTheme,\n    onApply: applyTheme,\n    onDone: closeForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }) : __jsx(ThemeListView, {\n    themeOptions: themeOptions,\n    currentTheme: currentTheme,\n    onSelectTheme: applyTheme,\n    onAddOrUpdateTheme: selectThemeForm,\n    onDeleteTheme: onDeleteTheme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/steven/Documents/lootcrate/gimme-the-loot/src/components/Tabs/manage_themes/manage_themes.jsx"],"names":["TabSectionHeaderProps","SimpleText","useState","useThemeOptions","ThemeForm","buildTheme","ThemeListView","ManageThemes","theme","currentTheme","setTheme","selectedThemeFormValues","setSelectedThemeFormValues","themeOptions","setThemeOptions","useEffect","callGetThemes","options","getThemes","onUpdateTheme","updatedTheme","updateTheme","updatedThemeOptions","map","id","onCreateTheme","newTheme","createTheme","concat","onDeleteTheme","themeId","deleteTheme","filter","selectThemeForm","formFields","saveTheme","applyTheme","builtTheme","closeForm"],"mappings":"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","sourcesContent":["import {\n  TabSectionHeaderProps\n} from \"../../../utils/styleUtils/commonTextProps\";\nimport { SimpleText } from \"../../CoreUI/Text/SimpleText\";\nimport { useState } from \"react\";\nimport { useThemeOptions } from \"../../../hooks/useThemeOptions\";\nimport { ThemeForm } from \"./theme_form\";\nimport buildTheme from \"../../../themes/buildTheme\";\nimport { ThemeListView } from \"./theme_list\";\n\nexport const ManageThemes = ({ theme: currentTheme, setTheme }) => {\n  const [selectedThemeFormValues, setSelectedThemeFormValues] = useState(null);\n  // const { themeOptions, onUpdateTheme, onCreateTheme, onDeleteTheme } = useThemeOptions();\n\n  const [themeOptions, setThemeOptions] = useState();\n\n  useEffect(() => {\n      const callGetThemes = async () => {\n          const options = await getThemes();  \n          setThemeOptions(options);  \n      }\n\n      callGetThemes();\n  }, []);\n\n  const onUpdateTheme = async (theme) => {\n      const updatedTheme = await updateTheme(theme);\n      const updatedThemeOptions = themeOptions.map(theme => theme.id !== updatedTheme.id ? theme : updatedTheme);\n      setThemeOptions(updatedThemeOptions);\n  }\n\n  const onCreateTheme = async (theme) => {\n      const newTheme = await createTheme(theme);\n      const updatedThemeOptions = themeOptions.concat([newTheme]);\n      setThemeOptions(updatedThemeOptions);\n  }\n\n  const onDeleteTheme = async (themeId) => {\n      await deleteTheme(themeId);\n      const updatedThemeOptions = themeOptions.filter(theme => theme.id !== themeId);\n      setThemeOptions(updatedThemeOptions);\n  }\n\n  const selectThemeForm = (formFields) => {\n    setSelectedThemeFormValues(formFields);\n  };\n\n  const saveTheme = (theme) => {\n    if (theme.id) {\n      onUpdateTheme(theme);\n    } else {\n      onCreateTheme(theme);\n    }\n  };\n\n  const applyTheme = (theme) => {\n    const builtTheme = buildTheme(theme);\n    setTheme(builtTheme);\n  };\n\n  const closeForm = () => {\n    setSelectedThemeFormValues(null);\n  };\n\n  return (\n    <React.Fragment>\n      <SimpleText {...TabSectionHeaderProps(currentTheme)}>\n        Manage Themes\n      </SimpleText>\n      {selectedThemeFormValues ? (\n        <ThemeForm\n          currentTheme={currentTheme}\n          initialValues={selectedThemeFormValues}\n          onSave={saveTheme}\n          onApply={applyTheme}\n          onDone={closeForm}\n        />\n      ) : (\n        <ThemeListView\n          themeOptions={themeOptions}\n          currentTheme={currentTheme}\n          onSelectTheme={applyTheme}\n          onAddOrUpdateTheme={selectThemeForm}\n          onDeleteTheme={onDeleteTheme}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}