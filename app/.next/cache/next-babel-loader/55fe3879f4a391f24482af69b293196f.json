{"ast":null,"code":"var _jsxFileName = \"/Users/steven/Documents/lootcrate/gimme-the-loot/src/components/Tabs/theme_form.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Grid } from \"../CoreUI/Grid/Grid\";\nimport { GridElement } from \"../CoreUI/Grid/GridElement\";\nimport { GridElementHeaderProps } from \"../../utils/styleUtils/commonTextProps\";\nimport { SimpleText } from \"../CoreUI/Text/SimpleText\";\nimport { DecoratedText } from \"../CoreUI/Text/DecoratedText\";\nconst ThemeFieldWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-bottom: 10px;\n`;\nconst ColorSquare = styled.div`\n  background-color: ${props => props.color};\n  height: 15px;\n  width: 15px;\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst ThemeField = ({\n  textConfig,\n  popColor,\n  displayName,\n  value,\n  fieldKey,\n  updateTheme\n}) => {\n  const fieldRef = useRef(null);\n\n  const getFieldRef = () => {\n    return fieldRef;\n  };\n\n  const [pickerOpen, setPickerOpen] = useState(false);\n\n  const onChangeComplete = newColor => {\n    updateTheme(fieldKey, newColor.hex);\n    setPickerOpen(false);\n  };\n\n  const onTogglePicker = () => setPickerOpen(!pickerOpen);\n\n  return __jsx(ThemeFieldWrapper, {\n    ref: fieldRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, pickerOpen && __jsx(RelativePop, {\n    height: \"89px\",\n    width: \"245px\",\n    position: {\n      horizontal: 7.5,\n      vertical: 0\n    },\n    margin: \"20px 0 0 0\",\n    arrowPosition: 3,\n    backgroundColor: currentTheme.surface.colors.primary,\n    borderColor: \"black\",\n    onClickAway: onTogglePicker,\n    getParentRef: getFieldRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, __jsx(CompactPicker, {\n    color: value,\n    onChangeComplete: onChangeComplete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  })), __jsx(DecoratedText, _extends({}, textConfig, {\n    decoration: __jsx(ColorSquare, {\n      color: value,\n      onClick: onTogglePicker,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 23\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }), displayName));\n};\n\nexport const ThemeForm = ({\n  currentTheme,\n  initialValues\n}) => {\n  const [themeValues, setThemeValues] = useState(initialValues);\n\n  const updateTheme = (fieldKey, newVal) => {\n    setThemeValues(_objectSpread(_objectSpread({}, themeValues), {}, {\n      [fieldKey]: newVal\n    }));\n  };\n\n  const {\n    text: {\n      styles: {\n        primary: primaryStyle\n      },\n      colors: {\n        primary: primaryColor\n      },\n      sizes: {\n        small\n      }\n    },\n    surface: {\n      colors: {\n        primary: popColor\n      }\n    }\n  } = currentTheme;\n  const fieldTextConfig = {\n    style: primaryStyle,\n    size: small,\n    color: primaryColor\n  };\n  const fields = Object.keys(initialValues).reduce((result, fieldKey) => {\n    const fieldVal = initialValues[fieldKey];\n    const fieldKeyParts = fieldKey.split(\"_\");\n    const fieldGroup = fieldKeyParts[0];\n    const field = fieldKeyParts[fieldKeyParts.length - 1];\n\n    if (!result[fieldGroup]) {\n      result[fieldGroup] = {};\n    }\n\n    result[fieldGroup][field] = {\n      fieldKey,\n      displayName: field[0].toUpperCase() + field.slice(1),\n      value: fieldVal\n    };\n    return result;\n  }, {});\n\n  const getFieldsByGroup = groupKey => {\n    return Object.entires(groupKey).map(field => {\n      return __jsx(ThemeField, {\n        textConfig: textConfig,\n        popColor: popColor,\n        displayName: field.displayName,\n        value: field.value,\n        fieldKey: field.fieldKey,\n        updateTheme: updateTheme,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 17\n        }\n      });\n    });\n  };\n\n  return __jsx(Grid, {\n    numCols: 12,\n    numRows: 3,\n    rowUnit: \"135px\",\n    colUnit: \"56px\",\n    key: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }\n  }, __jsx(GridElement, {\n    position: {\n      startCol: 1,\n      endCol: 5,\n      startRow: 1,\n      endRow: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, __jsx(SimpleText, _extends({}, GridElementHeaderProps(currentTheme), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }), \"Background\"), getFieldsByGroup(fields.background)), __jsx(GridElement, {\n    position: {\n      startCol: 5,\n      endCol: 9,\n      startRow: 1,\n      endRow: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }, __jsx(SimpleText, _extends({}, GridElementHeaderProps(currentTheme), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 8\n    }\n  }), \"Border\"), getFieldsByGroup(fields.currentTheme)), __jsx(GridElement, {\n    position: {\n      startCol: 9,\n      endCol: 13,\n      startRow: 1,\n      endRow: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }, __jsx(SimpleText, _extends({}, GridElementHeaderProps(currentTheme), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 8\n    }\n  }), \"Surface\"), getFieldsByGroup(fields.surface)), __jsx(GridElement, {\n    position: {\n      startCol: 1,\n      endCol: 5,\n      startRow: 2,\n      endRow: 4\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }, __jsx(SimpleText, _extends({}, GridElementHeaderProps(currentTheme), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 8\n    }\n  }), \"Text\"), getFieldsByGroup(fields.text)), __jsx(GridElement, {\n    position: {\n      startCol: 5,\n      endCol: 9,\n      startRow: 2,\n      endRow: 4\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }, __jsx(SimpleText, _extends({}, GridElementHeaderProps(currentTheme), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 8\n    }\n  }), \"Icon\"), getFieldsByGroup(fields.icon)), __jsx(GridElement, {\n    position: {\n      startCol: 9,\n      endCol: 13,\n      startRow: 2,\n      endRow: 3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }\n  }, __jsx(SimpleText, _extends({}, GridElementHeaderProps(currentTheme), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 8\n    }\n  }), \"Tab\"), getFieldsByGroup(fields.tab)));\n};","map":{"version":3,"sources":["/Users/steven/Documents/lootcrate/gimme-the-loot/src/components/Tabs/theme_form.jsx"],"names":["Grid","GridElement","GridElementHeaderProps","SimpleText","DecoratedText","ThemeFieldWrapper","styled","div","ColorSquare","props","color","ThemeField","textConfig","popColor","displayName","value","fieldKey","updateTheme","fieldRef","useRef","getFieldRef","pickerOpen","setPickerOpen","useState","onChangeComplete","newColor","hex","onTogglePicker","horizontal","vertical","currentTheme","surface","colors","primary","ThemeForm","initialValues","themeValues","setThemeValues","newVal","text","styles","primaryStyle","primaryColor","sizes","small","fieldTextConfig","style","size","fields","Object","keys","reduce","result","fieldVal","fieldKeyParts","split","fieldGroup","field","length","toUpperCase","slice","getFieldsByGroup","groupKey","entires","map","startCol","endCol","startRow","endRow","background","icon","tab"],"mappings":"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","sourcesContent":["import { Grid } from \"../CoreUI/Grid/Grid\";\nimport { GridElement } from \"../CoreUI/Grid/GridElement\";\nimport { GridElementHeaderProps } from \"../../utils/styleUtils/commonTextProps\";\nimport { SimpleText } from \"../CoreUI/Text/SimpleText\";\nimport { DecoratedText } from \"../CoreUI/Text/DecoratedText\";\n\nconst ThemeFieldWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-bottom: 10px;\n`;\n\nconst ColorSquare = styled.div`\n  background-color: ${(props) => props.color};\n  height: 15px;\n  width: 15px;\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst ThemeField = ({\n    textConfig,\n    popColor,\n    displayName,\n    value,\n    fieldKey,\n    updateTheme,\n  }) => {\n    const fieldRef = useRef(null);\n    const getFieldRef = () => {\n      return fieldRef;\n    };\n  \n    const [pickerOpen, setPickerOpen] = useState(false);\n  \n    const onChangeComplete = (newColor) => {\n      updateTheme(fieldKey, newColor.hex);\n      setPickerOpen(false);\n    };\n  \n    const onTogglePicker = () => setPickerOpen(!pickerOpen);\n  \n    return (\n      <ThemeFieldWrapper ref={fieldRef}>\n        {pickerOpen && (\n          <RelativePop\n            height=\"89px\"\n            width=\"245px\"\n            position={{\n              horizontal: 7.5,\n              vertical: 0,\n            }}\n            margin=\"20px 0 0 0\"\n            arrowPosition={3}\n            backgroundColor={currentTheme.surface.colors.primary}\n            borderColor=\"black\"\n            onClickAway={onTogglePicker}\n            getParentRef={getFieldRef}\n          >\n            <CompactPicker color={value} onChangeComplete={onChangeComplete} />\n          </RelativePop>\n        )}\n        <DecoratedText\n          {...textConfig}\n          decoration={<ColorSquare color={value} onClick={onTogglePicker} />}\n        >\n          {displayName}\n        </DecoratedText>\n      </ThemeFieldWrapper>\n    );\n  };\n\n\nexport const ThemeForm = ({ currentTheme, initialValues }) => {\n    const [themeValues, setThemeValues] = useState(initialValues);\n\n    const updateTheme = (fieldKey, newVal) => {\n      setThemeValues({\n        ...themeValues,\n        [fieldKey]: newVal,\n      });\n    };\n\n    const {\n        text: {\n          styles: { primary: primaryStyle },\n          colors: {\n            primary: primaryColor,\n          },\n          sizes: { small },\n        },\n        surface: {\n            colors: {\n                primary: popColor\n            }\n        }\n      } = currentTheme;\n\n      const fieldTextConfig = {\n        style: primaryStyle,\n        size: small,\n        color: primaryColor,\n      };\n\n  const fields = Object.keys(initialValues).reduce((result, fieldKey) => {\n    const fieldVal = initialValues[fieldKey];\n\n    const fieldKeyParts = fieldKey.split(\"_\");\n    const fieldGroup = fieldKeyParts[0];\n    const field = fieldKeyParts[fieldKeyParts.length - 1];\n\n    if (!result[fieldGroup]) {\n        result[fieldGroup] = {};\n    }\n\n    result[fieldGroup][field] = {\n        fieldKey,\n        displayName: field[0].toUpperCase() + field.slice(1),\n        value: fieldVal\n    }\n    \n    return result;\n  }, {});\n\n  const getFieldsByGroup = (groupKey) => {\n    return Object.entires(groupKey).map((field) => {\n        return  <ThemeField\n         textConfig={textConfig}\n         popColor={popColor}\n         displayName={field.displayName}\n         value={field.value}\n         fieldKey={field.fieldKey}\n         updateTheme={updateTheme}\n       />\n })\n  }\n\n  return (\n    <Grid numCols={12} numRows={3} rowUnit=\"135px\" colUnit=\"56px\" key={1}>\n      <GridElement\n        position={{\n          startCol: 1,\n          endCol: 5,\n          startRow: 1,\n          endRow: 2,\n        }}\n      >\n        <SimpleText {...GridElementHeaderProps(currentTheme)}>Background</SimpleText>\n        {getFieldsByGroup(fields.background)}\n      </GridElement>\n      <GridElement\n        position={{\n          startCol: 5,\n          endCol: 9,\n          startRow: 1,\n          endRow: 2,\n        }}\n      ><SimpleText {...GridElementHeaderProps(currentTheme)}>Border</SimpleText>{getFieldsByGroup(fields.currentTheme)}</GridElement>\n      <GridElement\n        position={{\n          startCol: 9,\n          endCol: 13,\n          startRow: 1,\n          endRow: 2,\n        }}\n      ><SimpleText {...GridElementHeaderProps(currentTheme)}>Surface</SimpleText>{getFieldsByGroup(fields.surface)}</GridElement>\n      <GridElement\n        position={{\n          startCol: 1,\n          endCol: 5,\n          startRow: 2,\n          endRow: 4,\n        }}\n      ><SimpleText {...GridElementHeaderProps(currentTheme)}>Text</SimpleText>{getFieldsByGroup(fields.text)}</GridElement>\n      <GridElement\n        position={{\n          startCol: 5,\n          endCol: 9,\n          startRow: 2,\n          endRow: 4,\n        }}\n      ><SimpleText {...GridElementHeaderProps(currentTheme)}>Icon</SimpleText>{getFieldsByGroup(fields.icon)}</GridElement>\n      <GridElement\n        position={{\n          startCol: 9,\n          endCol: 13,\n          startRow: 2,\n          endRow: 3,\n        }}\n      ><SimpleText {...GridElementHeaderProps(currentTheme)}>Tab</SimpleText>{getFieldsByGroup(fields.tab)}</GridElement>\n    </Grid>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}