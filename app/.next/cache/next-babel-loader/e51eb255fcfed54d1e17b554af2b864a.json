{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/steven/Documents/lootcrate/gimme-the-loot/src/components/Tabs/manage_themes/manage_themes.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { TabSectionHeaderProps } from \"../../../utils/styleUtils/commonTextProps\";\nimport { SimpleText } from \"../../CoreUI/Text/SimpleText\";\nimport { useState } from \"react\";\nimport { useThemeOptions } from \"../../../hooks/useThemeOptions\";\nimport { ThemeForm } from \"./theme_form\";\nimport buildTheme from \"../../../themes/buildTheme\";\nimport { ThemeListView } from \"./theme_list\";\nexport var ManageThemes = function ManageThemes(_ref) {\n  _s();\n\n  var currentTheme = _ref.theme,\n      setTheme = _ref.setTheme;\n\n  var _useState = useState(null),\n      selectedThemeFormValues = _useState[0],\n      setSelectedThemeFormValues = _useState[1];\n\n  var _useThemeOptions = useThemeOptions(),\n      error = _useThemeOptions.error,\n      themeOptions = _useThemeOptions.themeOptions,\n      onUpdateTheme = _useThemeOptions.onUpdateTheme,\n      onCreateTheme = _useThemeOptions.onCreateTheme,\n      onDeleteTheme = _useThemeOptions.onDeleteTheme;\n\n  if (error) {\n    return __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 12\n      }\n    }, \"Error loading themes\");\n  }\n\n  var selectThemeForm = function selectThemeForm(formFields) {\n    setSelectedThemeFormValues(formFields);\n  };\n\n  var saveTheme = function saveTheme(theme) {\n    if (theme.id) {\n      onUpdateTheme(theme);\n    } else {\n      onCreateTheme(theme);\n    }\n  };\n\n  var applyTheme = function applyTheme(theme) {\n    var builtTheme = buildTheme(theme);\n    setTheme(builtTheme);\n  };\n\n  var closeForm = function closeForm() {\n    setSelectedThemeFormValues(null);\n  };\n\n  return __jsx(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, __jsx(SimpleText, _extends({}, TabSectionHeaderProps(currentTheme), {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }), \"Manage Themes\"), selectedThemeFormValues ? __jsx(ThemeForm, {\n    currentTheme: currentTheme,\n    initialValues: selectedThemeFormValues,\n    onSave: saveTheme,\n    onApply: applyTheme,\n    onDone: closeForm,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }) : __jsx(ThemeListView, {\n    themeOptions: themeOptions,\n    currentTheme: currentTheme,\n    onSelectTheme: applyTheme,\n    onAddOrUpdateTheme: selectThemeForm,\n    onDeleteTheme: onDeleteTheme,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }));\n};\n\n_s(ManageThemes, \"GJJPKR4P6mayNQhCpQeeI9GfO1M=\", false, function () {\n  return [useThemeOptions];\n});\n\n_c = ManageThemes;\n\nvar _c;\n\n$RefreshReg$(_c, \"ManageThemes\");","map":{"version":3,"sources":["/Users/steven/Documents/lootcrate/gimme-the-loot/src/components/Tabs/manage_themes/manage_themes.jsx"],"names":["TabSectionHeaderProps","SimpleText","useState","useThemeOptions","ThemeForm","buildTheme","ThemeListView","ManageThemes","currentTheme","theme","setTheme","selectedThemeFormValues","setSelectedThemeFormValues","error","themeOptions","onUpdateTheme","onCreateTheme","onDeleteTheme","selectThemeForm","formFields","saveTheme","id","applyTheme","builtTheme","closeForm"],"mappings":";;;;;;;;AAAA,SACEA,qBADF,QAEO,2CAFP;AAGA,SAASC,UAAT,QAA2B,8BAA3B;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,SAASC,aAAT,QAA8B,cAA9B;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAAuC;AAAA;;AAAA,MAA7BC,YAA6B,QAApCC,KAAoC;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,kBACHR,QAAQ,CAAC,IAAD,CADL;AAAA,MAC1DS,uBAD0D;AAAA,MACjCC,0BADiC;;AAAA,yBAEYT,eAAe,EAF3B;AAAA,MAEzDU,KAFyD,oBAEzDA,KAFyD;AAAA,MAElDC,YAFkD,oBAElDA,YAFkD;AAAA,MAEpCC,aAFoC,oBAEpCA,aAFoC;AAAA,MAErBC,aAFqB,oBAErBA,aAFqB;AAAA,MAENC,aAFM,oBAENA,aAFM;;AAIjE,MAAIJ,KAAJ,EAAW;AACT,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAP;AACD;;AAED,MAAMK,eAAe,GAAG,SAAlBA,eAAkB,CAACC,UAAD,EAAgB;AACtCP,IAAAA,0BAA0B,CAACO,UAAD,CAA1B;AACD,GAFD;;AAIA,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAACX,KAAD,EAAW;AAC3B,QAAIA,KAAK,CAACY,EAAV,EAAc;AACZN,MAAAA,aAAa,CAACN,KAAD,CAAb;AACD,KAFD,MAEO;AACLO,MAAAA,aAAa,CAACP,KAAD,CAAb;AACD;AACF,GAND;;AAQA,MAAMa,UAAU,GAAG,SAAbA,UAAa,CAACb,KAAD,EAAW;AAC5B,QAAMc,UAAU,GAAGlB,UAAU,CAACI,KAAD,CAA7B;AACAC,IAAAA,QAAQ,CAACa,UAAD,CAAR;AACD,GAHD;;AAKA,MAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtBZ,IAAAA,0BAA0B,CAAC,IAAD,CAA1B;AACD,GAFD;;AAIA,SACE,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD,eAAgBZ,qBAAqB,CAACQ,YAAD,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAIGG,uBAAuB,GACtB,MAAC,SAAD;AACE,IAAA,YAAY,EAAEH,YADhB;AAEE,IAAA,aAAa,EAAEG,uBAFjB;AAGE,IAAA,MAAM,EAAES,SAHV;AAIE,IAAA,OAAO,EAAEE,UAJX;AAKE,IAAA,MAAM,EAAEE,SALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADsB,GAStB,MAAC,aAAD;AACE,IAAA,YAAY,EAAEV,YADhB;AAEE,IAAA,YAAY,EAAEN,YAFhB;AAGE,IAAA,aAAa,EAAEc,UAHjB;AAIE,IAAA,kBAAkB,EAAEJ,eAJtB;AAKE,IAAA,aAAa,EAAED,aALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbJ,CADF;AAwBD,CArDM;;GAAMV,Y;UAEkEJ,e;;;KAFlEI,Y","sourcesContent":["import {\n  TabSectionHeaderProps\n} from \"../../../utils/styleUtils/commonTextProps\";\nimport { SimpleText } from \"../../CoreUI/Text/SimpleText\";\nimport { useState } from \"react\";\nimport { useThemeOptions } from \"../../../hooks/useThemeOptions\";\nimport { ThemeForm } from \"./theme_form\";\nimport buildTheme from \"../../../themes/buildTheme\";\nimport { ThemeListView } from \"./theme_list\";\n\nexport const ManageThemes = ({ theme: currentTheme, setTheme }) => {\n  const [selectedThemeFormValues, setSelectedThemeFormValues] = useState(null);\n  const { error, themeOptions, onUpdateTheme, onCreateTheme, onDeleteTheme } = useThemeOptions();\n\n  if (error) {\n    return <div>Error loading themes</div>;\n  }\n\n  const selectThemeForm = (formFields) => {\n    setSelectedThemeFormValues(formFields);\n  };\n\n  const saveTheme = (theme) => {\n    if (theme.id) {\n      onUpdateTheme(theme);\n    } else {\n      onCreateTheme(theme);\n    }\n  };\n\n  const applyTheme = (theme) => {\n    const builtTheme = buildTheme(theme);\n    setTheme(builtTheme);\n  };\n\n  const closeForm = () => {\n    setSelectedThemeFormValues(null);\n  };\n\n  return (\n    <React.Fragment>\n      <SimpleText {...TabSectionHeaderProps(currentTheme)}>\n        Manage Themes\n      </SimpleText>\n      {selectedThemeFormValues ? (\n        <ThemeForm\n          currentTheme={currentTheme}\n          initialValues={selectedThemeFormValues}\n          onSave={saveTheme}\n          onApply={applyTheme}\n          onDone={closeForm}\n        />\n      ) : (\n        <ThemeListView\n          themeOptions={themeOptions}\n          currentTheme={currentTheme}\n          onSelectTheme={applyTheme}\n          onAddOrUpdateTheme={selectThemeForm}\n          onDeleteTheme={onDeleteTheme}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}