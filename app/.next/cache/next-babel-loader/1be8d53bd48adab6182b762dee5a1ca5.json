{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getThemes, updateTheme, createTheme, deleteTheme } from \"../api/theme_api\";\nimport { useEffect, useState } from \"react\";\nimport defaultThemeValues from \"../themes/defaultThemeValues\";\n\nconst defaultTheme = _objectSpread(_objectSpread({}, defaultThemeValues), {}, {\n  name: \"Default\"\n});\n\nexport const useThemeOptions = () => {\n  const {\n    0: themeOptions,\n    1: setThemeOptions\n  } = useState([defaultTheme]);\n  const {\n    0: error,\n    1: setError\n  } = useState(false);\n  useEffect(() => {\n    const callGetThemes = async () => {\n      const {\n        error,\n        response\n      } = await getThemes();\n\n      if (error) {} else if (response) {\n        setThemeOptions([defaultTheme].concat(options));\n      }\n    };\n\n    callGetThemes();\n  }, []);\n\n  const onUpdateTheme = async theme => {\n    const updatedTheme = await updateTheme(theme);\n    const updatedThemeOptions = themeOptions.map(theme => theme.id !== updatedTheme.id ? theme : updatedTheme);\n    setThemeOptions(updatedThemeOptions);\n  };\n\n  const onCreateTheme = async theme => {\n    const newTheme = await createTheme(theme);\n    const updatedThemeOptions = themeOptions.concat([newTheme]);\n    setThemeOptions(updatedThemeOptions);\n  };\n\n  const onDeleteTheme = async themeId => {\n    await deleteTheme(themeId);\n    const updatedThemeOptions = themeOptions.filter(theme => theme.id !== themeId);\n    setThemeOptions(updatedThemeOptions);\n  };\n\n  return {\n    themeOptions,\n    onUpdateTheme,\n    onCreateTheme,\n    onDeleteTheme\n  };\n};","map":{"version":3,"sources":["/Users/steven/Documents/lootcrate/gimme-the-loot/src/hooks/useThemeOptions.jsx"],"names":["getThemes","updateTheme","createTheme","deleteTheme","useEffect","useState","defaultThemeValues","defaultTheme","name","useThemeOptions","themeOptions","setThemeOptions","error","setError","callGetThemes","response","concat","options","onUpdateTheme","theme","updatedTheme","updatedThemeOptions","map","id","onCreateTheme","newTheme","onDeleteTheme","themeId","filter"],"mappings":";;;;;;AAAA,SAASA,SAAT,EAAoBC,WAApB,EAAiCC,WAAjC,EAA8CC,WAA9C,QAAiE,kBAAjE;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,kBAAP,MAA+B,8BAA/B;;AAEA,MAAMC,YAAY,mCAAQD,kBAAR;AAA4BE,EAAAA,IAAI,EAAE;AAAlC,EAAlB;;AAGA,OAAO,MAAMC,eAAe,GAAG,MAAM;AACjC,QAAM;AAAA,OAACC,YAAD;AAAA,OAAeC;AAAf,MAAkCN,QAAQ,CAAC,CAACE,YAAD,CAAD,CAAhD;AACA,QAAM;AAAA,OAACK,KAAD;AAAA,OAAQC;AAAR,MAAoBR,QAAQ,CAAC,KAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,aAAa,GAAG,YAAY;AAC9B,YAAM;AAAEF,QAAAA,KAAF;AAASG,QAAAA;AAAT,UAAsB,MAAMf,SAAS,EAA3C;;AACA,UAAIY,KAAJ,EAAW,CAEV,CAFD,MAEO,IAAIG,QAAJ,EAAc;AACjBJ,QAAAA,eAAe,CAAC,CAACJ,YAAD,EAAeS,MAAf,CAAsBC,OAAtB,CAAD,CAAf;AACH;AACJ,KAPD;;AASAH,IAAAA,aAAa;AAChB,GAXQ,EAWN,EAXM,CAAT;;AAaA,QAAMI,aAAa,GAAG,MAAOC,KAAP,IAAiB;AACnC,UAAMC,YAAY,GAAG,MAAMnB,WAAW,CAACkB,KAAD,CAAtC;AACA,UAAME,mBAAmB,GAAGX,YAAY,CAACY,GAAb,CAAiBH,KAAK,IAAIA,KAAK,CAACI,EAAN,KAAaH,YAAY,CAACG,EAA1B,GAA+BJ,KAA/B,GAAuCC,YAAjE,CAA5B;AACAT,IAAAA,eAAe,CAACU,mBAAD,CAAf;AACH,GAJD;;AAMA,QAAMG,aAAa,GAAG,MAAOL,KAAP,IAAiB;AACnC,UAAMM,QAAQ,GAAG,MAAMvB,WAAW,CAACiB,KAAD,CAAlC;AACA,UAAME,mBAAmB,GAAGX,YAAY,CAACM,MAAb,CAAoB,CAACS,QAAD,CAApB,CAA5B;AACAd,IAAAA,eAAe,CAACU,mBAAD,CAAf;AACH,GAJD;;AAMA,QAAMK,aAAa,GAAG,MAAOC,OAAP,IAAmB;AACrC,UAAMxB,WAAW,CAACwB,OAAD,CAAjB;AACA,UAAMN,mBAAmB,GAAGX,YAAY,CAACkB,MAAb,CAAoBT,KAAK,IAAIA,KAAK,CAACI,EAAN,KAAaI,OAA1C,CAA5B;AACAhB,IAAAA,eAAe,CAACU,mBAAD,CAAf;AACH,GAJD;;AAMA,SAAO;AAAEX,IAAAA,YAAF;AAAgBQ,IAAAA,aAAhB;AAA+BM,IAAAA,aAA/B;AAA8CE,IAAAA;AAA9C,GAAP;AACH,CApCM","sourcesContent":["import { getThemes, updateTheme, createTheme, deleteTheme } from \"../api/theme_api\"\nimport { useEffect, useState } from \"react\";\nimport defaultThemeValues from \"../themes/defaultThemeValues\";\n\nconst defaultTheme = { ...defaultThemeValues, name: \"Default\"};\n\n\nexport const useThemeOptions = () => {\n    const [themeOptions, setThemeOptions] = useState([defaultTheme]);\n    const [error, setError] = useState(false);\n\n    useEffect(() => {\n        const callGetThemes = async () => {\n            const { error, response } = await getThemes();\n            if (error) {\n\n            } else if (response) {\n                setThemeOptions([defaultTheme].concat(options));\n            }  \n        }\n\n        callGetThemes();\n    }, []);\n\n    const onUpdateTheme = async (theme) => {\n        const updatedTheme = await updateTheme(theme);\n        const updatedThemeOptions = themeOptions.map(theme => theme.id !== updatedTheme.id ? theme : updatedTheme);\n        setThemeOptions(updatedThemeOptions);\n    }\n\n    const onCreateTheme = async (theme) => {\n        const newTheme = await createTheme(theme);\n        const updatedThemeOptions = themeOptions.concat([newTheme]);\n        setThemeOptions(updatedThemeOptions);\n    }\n\n    const onDeleteTheme = async (themeId) => {\n        await deleteTheme(themeId);\n        const updatedThemeOptions = themeOptions.filter(theme => theme.id !== themeId);\n        setThemeOptions(updatedThemeOptions);\n    }\n\n    return { themeOptions, onUpdateTheme, onCreateTheme, onDeleteTheme }\n}"]},"metadata":{},"sourceType":"module"}