{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/steven/Documents/lootcrate/gimme-the-loot/src/components/Tabs/manage_themes.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { GridElement } from \"../CoreUI/Grid/GridElement\";\nimport { Grid } from \"../CoreUI/Grid/Grid\";\nimport { TabSectionHeaderProps, GridElementHeaderProps } from \"../../utils/styleUtils/commonTextProps\";\nimport { SimpleText } from \"../CoreUI/Text/SimpleText\";\nimport { faPlusCircle, faEdit } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport styled from \"styled-components\";\nimport { useState, useRef } from \"react\";\nimport { CompactPicker } from \"react-color\";\nimport { RelativePop } from \"../CoreUI/Popover/RelativePop\";\nimport { useThemeOptions } from \"../../hooks/useThemeOptions\";\nimport { ThemeForm } from \"./theme_form\";\nvar ThemeOptionWrapper = styled.div.withConfig({\n  displayName: \"manage_themes__ThemeOptionWrapper\",\n  componentId: \"npadpy-0\"\n})([\"display:flex;flex-direction:row;align-items:center;\"]);\n_c = ThemeOptionWrapper;\n\nvar ThemeOption = function ThemeOption(_ref) {\n  var theme = _ref.theme,\n      textStyle = _ref.textStyle,\n      onSelectTheme = _ref.onSelectTheme,\n      onEditTheme = _ref.onEditTheme,\n      _ref$editable = _ref.editable,\n      editable = _ref$editable === void 0 ? true : _ref$editable;\n  return __jsx(ThemeOptionWrapper, {\n    onClick: onSelectTheme,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, __jsx(SimpleText, _extends({}, textStyle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }), theme.name), editable && onEditTheme && __jsx(FontAwesomeIcon, {\n    onClick: onEditTheme,\n    icon: faEdit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }));\n};\n\n_c2 = ThemeOption;\nvar ThemeListWrapper = styled.div.withConfig({\n  displayName: \"manage_themes__ThemeListWrapper\",\n  componentId: \"npadpy-1\"\n})([\"display:flex;flex-direction:column;justify-content:center;align-items:center;border-top:\", \";\"], function (props) {\n  return \"1px solid \".concat(props.border);\n});\n_c3 = ThemeListWrapper;\n\nvar ThemeListView = function ThemeListView(_ref2) {\n  var currentTheme = _ref2.currentTheme,\n      themeOptions = _ref2.themeOptions,\n      onAddOrUpdateTheme = _ref2.onAddOrUpdateTheme;\n\n  if (!themeOptions) {\n    return __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  var editTheme = function editTheme(theme) {\n    return function () {\n      onAddOrUpdateTheme(theme);\n    };\n  };\n\n  var selectTheme = function selectTheme(theme) {\n    return function () {\n      console.log(theme);\n    };\n  };\n\n  var textStyle = _objectSpread({}, GridElementHeaderProps(currentTheme));\n\n  return __jsx(ThemeListWrapper, {\n    border: currentTheme.border.colors.primary,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, __jsx(FontAwesomeIcon, {\n    icon: faPlusCircle,\n    color: currentTheme.icon.colors.other.c,\n    onClick: onAddOrUpdateTheme,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }), themeOptions.map(function (themeOption) {\n    return __jsx(ThemeOption, {\n      theme: themeOption,\n      textStyle: textStyle,\n      onSelectTheme: selectTheme(themeOption),\n      onEditTheme: editTheme(themeOption),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }\n    });\n  }));\n}; // const ThemeFieldWrapper = styled.div`\n//   display: flex;\n//   flex-direction: row;\n//   align-items: center;\n//   margin-bottom: 10px;\n// `;\n// const ColorSquare = styled.div`\n//   background-color: ${(props) => props.color};\n//   height: 15px;\n//   width: 15px;\n//   &:hover {\n//     cursor: pointer;\n//   }\n// `;\n// const ThemeField = ({\n//   currentTheme,\n//   displayName,\n//   value,\n//   fieldKey,\n//   updateTheme,\n// }) => {\n//   const fieldRef = useRef(null);\n//   const getFieldRef = () => {\n//     return fieldRef;\n//   };\n//   const [pickerOpen, setPickerOpen] = useState(false);\n//   const onChangeComplete = (newColor) => {\n//     updateTheme(fieldKey, newColor.hex);\n//     setPickerOpen(false);\n//   };\n//   const onTogglePicker = () => setPickerOpen(!pickerOpen);\n//   return (\n//     <ThemeFieldWrapper ref={fieldRef}>\n//       <ColorSquare color={value} onClick={onTogglePicker} />\n//       {pickerOpen && (\n//         <RelativePop\n//           height=\"89px\"\n//           width=\"245px\"\n//           position={{\n//             horizontal: 7.5,\n//             vertical: 0,\n//           }}\n//           margin=\"20px 0 0 0\"\n//           arrowPosition={3}\n//           backgroundColor={currentTheme.surface.colors.primary}\n//           borderColor=\"black\"\n//           onClickAway={onTogglePicker}\n//           getParentRef={getFieldRef}\n//         >\n//           <CompactPicker color={value} onChangeComplete={onChangeComplete} />\n//         </RelativePop>\n//       )}\n//       <SimpleText\n//         color={currentTheme.text.colors.primary}\n//         style={currentTheme.text.styles.primary}\n//         size={currentTheme.text.sizes.large}\n//       >\n//         {displayName}\n//       </SimpleText>\n//     </ThemeFieldWrapper>\n//   );\n// };\n// const ThemeFormWrapper = styled.div`\n//   display: flex;\n//   flex-direction: column;\n//   justify-content: center;\n//   margin: 20px;\n// `;\n// const ThemeFormView = ({ currentTheme, initialValues }) => {\n//   const [themeValues, setThemeValues] = useState(initialValues);\n//   const updateTheme = (fieldKey, newVal) => {\n//     setThemeValues({\n//       ...themeValues,\n//       [fieldKey]: newVal,\n//     });\n//   };\n//   const fields = Object.keys(initialValues).map((fieldKey) => {\n//     const fieldVal = initialValues[fieldKey];\n//     const displayName = fieldKey\n//       .split(\"_\")\n//       .map((word) => word[0].toUpperCase() + word.slice(1))\n//       .join(\" \");\n//     return (\n//       <ThemeField\n//         currentTheme={currentTheme}\n//         displayName={displayName}\n//         value={fieldVal}\n//         fieldKey={fieldKey}\n//         updateTheme={updateTheme}\n//       />\n//     );\n//   });\n//   return <ThemeFormWrapper>{fields}</ThemeFormWrapper>;\n// };\n\n\n_c4 = ThemeListView;\nexport var ManageThemes = function ManageThemes(_ref3) {\n  _s();\n\n  var currentTheme = _ref3.theme,\n      setTheme = _ref3.setTheme;\n\n  var _useState = useState(null),\n      selectedThemeFormValues = _useState[0],\n      setSelectedThemeFormValues = _useState[1];\n\n  var _useThemeOptions = useThemeOptions(),\n      themeOptions = _useThemeOptions.themeOptions;\n\n  var onSelectThemeForm = function onSelectThemeForm(formFields) {\n    setSelectedThemeFormValues(formFields);\n  };\n\n  return __jsx(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 5\n    }\n  }, __jsx(SimpleText, _extends({}, TabSectionHeaderProps(currentTheme), {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }\n  }), \"Manage Themes\"), selectedThemeFormValues ? __jsx(ThemeForm, {\n    currentTheme: currentTheme,\n    initialValues: selectedThemeFormValues,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }\n  }) : __jsx(Grid, {\n    numCols: 16,\n    numRows: 9,\n    rowUnit: \"28px\",\n    colUnit: \"28px\",\n    key: 0,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }\n  }, __jsx(GridElement, {\n    position: {\n      startCol: 1,\n      endCol: 17,\n      startRow: 1,\n      endRow: 10\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 11\n    }\n  }, __jsx(ThemeListView, {\n    themeOptions: themeOptions,\n    currentTheme: currentTheme,\n    onAddOrUpdateTheme: onSelectThemeForm,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }\n  }))));\n};\n\n_s(ManageThemes, \"vvg3VcdLkCEzWacRZlgYJmH3/aY=\", false, function () {\n  return [useThemeOptions];\n});\n\n_c5 = ManageThemes;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"ThemeOptionWrapper\");\n$RefreshReg$(_c2, \"ThemeOption\");\n$RefreshReg$(_c3, \"ThemeListWrapper\");\n$RefreshReg$(_c4, \"ThemeListView\");\n$RefreshReg$(_c5, \"ManageThemes\");","map":{"version":3,"sources":["/Users/steven/Documents/lootcrate/gimme-the-loot/src/components/Tabs/manage_themes.jsx"],"names":["GridElement","Grid","TabSectionHeaderProps","GridElementHeaderProps","SimpleText","faPlusCircle","faEdit","FontAwesomeIcon","styled","useState","useRef","CompactPicker","RelativePop","useThemeOptions","ThemeForm","ThemeOptionWrapper","div","ThemeOption","theme","textStyle","onSelectTheme","onEditTheme","editable","name","ThemeListWrapper","props","border","ThemeListView","currentTheme","themeOptions","onAddOrUpdateTheme","editTheme","selectTheme","console","log","colors","primary","icon","other","c","map","themeOption","ManageThemes","setTheme","selectedThemeFormValues","setSelectedThemeFormValues","onSelectThemeForm","formFields","startCol","endCol","startRow","endRow"],"mappings":"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","sourcesContent":["import { GridElement } from \"../CoreUI/Grid/GridElement\";\nimport { Grid } from \"../CoreUI/Grid/Grid\";\nimport {\n  TabSectionHeaderProps,\n  GridElementHeaderProps,\n} from \"../../utils/styleUtils/commonTextProps\";\nimport { SimpleText } from \"../CoreUI/Text/SimpleText\";\nimport { faPlusCircle, faEdit } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport styled from \"styled-components\";\nimport { useState, useRef } from \"react\";\nimport { CompactPicker } from \"react-color\";\nimport { RelativePop } from \"../CoreUI/Popover/RelativePop\";\nimport { useThemeOptions } from \"../../hooks/useThemeOptions\";\nimport { ThemeForm } from \"./theme_form\";\n\nconst ThemeOptionWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nconst ThemeOption = ({\n  theme,\n  textStyle,\n  onSelectTheme,\n  onEditTheme,\n  editable = true,\n}) => {\n  return (\n    <ThemeOptionWrapper onClick={onSelectTheme}>\n      <SimpleText {...textStyle}>{theme.name}</SimpleText>\n      {editable && onEditTheme && (\n        <FontAwesomeIcon onClick={onEditTheme} icon={faEdit} />\n      )}\n    </ThemeOptionWrapper>\n  );\n};\n\nconst ThemeListWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  border-top: ${(props) => `1px solid ${props.border}`};\n`;\n\nconst ThemeListView = ({ currentTheme, themeOptions, onAddOrUpdateTheme }) => {\n  if (!themeOptions) {\n    return <div>Loading...</div>;\n  }\n\n  const editTheme = (theme) => {\n    return () => {\n      onAddOrUpdateTheme(theme);\n    };\n  };\n\n  const selectTheme = (theme) => {\n    return () => {\n      console.log(theme);\n    };\n  };\n\n  const textStyle = { ...GridElementHeaderProps(currentTheme) };\n\n  return (\n    <ThemeListWrapper border={currentTheme.border.colors.primary}>\n      <FontAwesomeIcon\n        icon={faPlusCircle}\n        color={currentTheme.icon.colors.other.c}\n        onClick={onAddOrUpdateTheme}\n      />\n      {themeOptions.map((themeOption) => {\n        return (\n          <ThemeOption\n            theme={themeOption}\n            textStyle={textStyle}\n            onSelectTheme={selectTheme(themeOption)}\n            onEditTheme={editTheme(themeOption)}\n          />\n        );\n      })}\n    </ThemeListWrapper>\n  );\n};\n\n// const ThemeFieldWrapper = styled.div`\n//   display: flex;\n//   flex-direction: row;\n//   align-items: center;\n//   margin-bottom: 10px;\n// `;\n\n// const ColorSquare = styled.div`\n//   background-color: ${(props) => props.color};\n//   height: 15px;\n//   width: 15px;\n//   &:hover {\n//     cursor: pointer;\n//   }\n// `;\n\n// const ThemeField = ({\n//   currentTheme,\n//   displayName,\n//   value,\n//   fieldKey,\n//   updateTheme,\n// }) => {\n//   const fieldRef = useRef(null);\n//   const getFieldRef = () => {\n//     return fieldRef;\n//   };\n\n//   const [pickerOpen, setPickerOpen] = useState(false);\n\n//   const onChangeComplete = (newColor) => {\n//     updateTheme(fieldKey, newColor.hex);\n//     setPickerOpen(false);\n//   };\n\n//   const onTogglePicker = () => setPickerOpen(!pickerOpen);\n\n//   return (\n//     <ThemeFieldWrapper ref={fieldRef}>\n//       <ColorSquare color={value} onClick={onTogglePicker} />\n//       {pickerOpen && (\n//         <RelativePop\n//           height=\"89px\"\n//           width=\"245px\"\n//           position={{\n//             horizontal: 7.5,\n//             vertical: 0,\n//           }}\n//           margin=\"20px 0 0 0\"\n//           arrowPosition={3}\n//           backgroundColor={currentTheme.surface.colors.primary}\n//           borderColor=\"black\"\n//           onClickAway={onTogglePicker}\n//           getParentRef={getFieldRef}\n//         >\n//           <CompactPicker color={value} onChangeComplete={onChangeComplete} />\n//         </RelativePop>\n//       )}\n//       <SimpleText\n//         color={currentTheme.text.colors.primary}\n//         style={currentTheme.text.styles.primary}\n//         size={currentTheme.text.sizes.large}\n//       >\n//         {displayName}\n//       </SimpleText>\n//     </ThemeFieldWrapper>\n//   );\n// };\n\n// const ThemeFormWrapper = styled.div`\n//   display: flex;\n//   flex-direction: column;\n//   justify-content: center;\n//   margin: 20px;\n// `;\n\n// const ThemeFormView = ({ currentTheme, initialValues }) => {\n//   const [themeValues, setThemeValues] = useState(initialValues);\n\n//   const updateTheme = (fieldKey, newVal) => {\n//     setThemeValues({\n//       ...themeValues,\n//       [fieldKey]: newVal,\n//     });\n//   };\n\n//   const fields = Object.keys(initialValues).map((fieldKey) => {\n//     const fieldVal = initialValues[fieldKey];\n//     const displayName = fieldKey\n//       .split(\"_\")\n//       .map((word) => word[0].toUpperCase() + word.slice(1))\n//       .join(\" \");\n\n//     return (\n//       <ThemeField\n//         currentTheme={currentTheme}\n//         displayName={displayName}\n//         value={fieldVal}\n//         fieldKey={fieldKey}\n//         updateTheme={updateTheme}\n//       />\n//     );\n//   });\n\n//   return <ThemeFormWrapper>{fields}</ThemeFormWrapper>;\n// };\n\nexport const ManageThemes = ({ theme: currentTheme, setTheme }) => {\n  const [selectedThemeFormValues, setSelectedThemeFormValues] = useState(null);\n  const { themeOptions } = useThemeOptions();\n\n  const onSelectThemeForm = (formFields) => {\n    setSelectedThemeFormValues(formFields);\n  };\n\n  return (\n    <React.Fragment>\n      <SimpleText {...TabSectionHeaderProps(currentTheme)}>\n        Manage Themes\n      </SimpleText>\n      {selectedThemeFormValues ? (\n        <ThemeForm currentTheme={currentTheme} initialValues={selectedThemeFormValues} />\n      ) : (\n        <Grid numCols={16} numRows={9} rowUnit=\"28px\" colUnit=\"28px\" key={0}>\n          <GridElement\n            position={{\n              startCol: 1,\n              endCol: 17,\n              startRow: 1,\n              endRow: 10,\n            }}\n          >\n            <ThemeListView\n              themeOptions={themeOptions}\n              currentTheme={currentTheme}\n              onAddOrUpdateTheme={onSelectThemeForm}\n            />\n          </GridElement>\n        </Grid>\n      )}\n    </React.Fragment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}