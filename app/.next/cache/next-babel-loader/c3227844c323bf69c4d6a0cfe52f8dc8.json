{"ast":null,"code":"var _jsxFileName = \"/Users/steven/Documents/demo/demo_app/src/components/CoreUI/Text/MultiText.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { SimpleText } from \"./SimpleText\";\nimport PropTypes from \"prop-types\";\nexport const MultiText = ({\n  textConfigs\n}) => {\n  return textConfigs.map((config, i) => {\n    const {\n      content\n    } = config,\n          rest = _objectWithoutProperties(config, [\"content\"]);\n\n    return __jsx(SimpleText, _extends({}, rest, {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 12\n      }\n    }), content);\n  });\n};\nMultiText.propTypes = {\n  textConfigs: PropTypes.arrayOf(PropTypes.shape({\n    content: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    style: PropTypes.string,\n    size: PropTypes.string,\n    color: PropTypes.string,\n    backgroundColor: PropTypes.string,\n    weight: PropTypes.number,\n    lowerCase: PropTypes.bool,\n    padding: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    margin: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    moreStyles: PropTypes.string\n  }))\n};","map":{"version":3,"sources":["/Users/steven/Documents/demo/demo_app/src/components/CoreUI/Text/MultiText.jsx"],"names":["SimpleText","PropTypes","MultiText","textConfigs","map","config","i","content","rest","propTypes","arrayOf","shape","oneOfType","string","number","style","size","color","backgroundColor","weight","lowerCase","bool","padding","margin","moreStyles"],"mappings":";;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,cAA3B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAO,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAqB;AAC5C,SAAOA,WAAW,CAACC,GAAZ,CAAgB,CAACC,MAAD,EAASC,CAAT,KAAe;AACpC,UAAM;AAAEC,MAAAA;AAAF,QAAuBF,MAA7B;AAAA,UAAoBG,IAApB,4BAA6BH,MAA7B;;AACA,WAAO,MAAC,UAAD,eAAgBG,IAAhB;AAAsB,MAAA,GAAG,EAAEF,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA+BC,OAA/B,CAAP;AACD,GAHM,CAAP;AAID,CALM;AAOPL,SAAS,CAACO,SAAV,GAAsB;AACpBN,EAAAA,WAAW,EAAEF,SAAS,CAACS,OAAV,CACXT,SAAS,CAACU,KAAV,CAAgB;AACdJ,IAAAA,OAAO,EAAEN,SAAS,CAACW,SAAV,CAAoB,CAACX,SAAS,CAACY,MAAX,EAAmBZ,SAAS,CAACa,MAA7B,CAApB,CADK;AAEdC,IAAAA,KAAK,EAAEd,SAAS,CAACY,MAFH;AAGdG,IAAAA,IAAI,EAAEf,SAAS,CAACY,MAHF;AAIdI,IAAAA,KAAK,EAAEhB,SAAS,CAACY,MAJH;AAKdK,IAAAA,eAAe,EAAEjB,SAAS,CAACY,MALb;AAMdM,IAAAA,MAAM,EAAElB,SAAS,CAACa,MANJ;AAOdM,IAAAA,SAAS,EAAEnB,SAAS,CAACoB,IAPP;AAQdC,IAAAA,OAAO,EAAErB,SAAS,CAACW,SAAV,CAAoB,CAACX,SAAS,CAACY,MAAX,EAAmBZ,SAAS,CAACa,MAA7B,CAApB,CARK;AASdS,IAAAA,MAAM,EAAEtB,SAAS,CAACW,SAAV,CAAoB,CAACX,SAAS,CAACY,MAAX,EAAmBZ,SAAS,CAACa,MAA7B,CAApB,CATM;AAUdU,IAAAA,UAAU,EAAEvB,SAAS,CAACY;AAVR,GAAhB,CADW;AADO,CAAtB","sourcesContent":["import { SimpleText } from \"./SimpleText\";\nimport PropTypes from \"prop-types\";\n\nexport const MultiText = ({ textConfigs }) => {\n  return textConfigs.map((config, i) => {\n    const { content, ...rest } = config;\n    return <SimpleText {...rest} key={i}>{content}</SimpleText>;\n  });\n};\n\nMultiText.propTypes = {\n  textConfigs: PropTypes.arrayOf(\n    PropTypes.shape({\n      content: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      style: PropTypes.string,\n      size: PropTypes.string,\n      color: PropTypes.string,\n      backgroundColor: PropTypes.string,\n      weight: PropTypes.number,\n      lowerCase: PropTypes.bool,\n      padding: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      margin: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      moreStyles: PropTypes.string,\n    })\n  ),\n};\n"]},"metadata":{},"sourceType":"module"}