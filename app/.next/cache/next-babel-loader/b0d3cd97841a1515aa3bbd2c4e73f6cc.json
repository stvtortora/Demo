{"ast":null,"code":"var _jsxFileName = \"/Users/steven/Documents/lootcrate/gimme-the-loot/src/components/Tabs/manage_themes/manage_themes.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { GridElement } from \"../../CoreUI/Grid/GridElement\";\nimport { Grid } from \"../../CoreUI/Grid/Grid\";\nimport { TabSectionHeaderProps, GridElementHeaderProps } from \"../../../utils/styleUtils/commonTextProps\";\nimport { SimpleText } from \"../../CoreUI/Text/SimpleText\";\nimport { faPlusCircle, faEdit } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport styled from \"styled-components\";\nimport { useState, useRef } from \"react\";\nimport { CompactPicker } from \"react-color\";\nimport { RelativePop } from \"../../CoreUI/Popover/RelativePop\";\nimport { useThemeOptions } from \"../../../hooks/useThemeOptions\";\nimport { ThemeForm } from \"./theme_form\";\nimport buildTheme from \"../../../themes/buildTheme\";\nconst ThemeOptionWrapper = styled.div.withConfig({\n  displayName: \"manage_themes__ThemeOptionWrapper\",\n  componentId: \"sc-70fh2v-0\"\n})([\"display:flex;flex-direction:row;align-items:center;\"]);\n\nconst ThemeOption = ({\n  theme,\n  textStyle,\n  onSelectTheme,\n  onEditTheme,\n  editable = true\n}) => {\n  return __jsx(ThemeOptionWrapper, {\n    onClick: onSelectTheme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, __jsx(SimpleText, _extends({}, textStyle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }), theme.name), editable && onEditTheme && __jsx(FontAwesomeIcon, {\n    onClick: onEditTheme,\n    icon: faEdit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }));\n};\n\nconst ThemeListWrapper = styled.div.withConfig({\n  displayName: \"manage_themes__ThemeListWrapper\",\n  componentId: \"sc-70fh2v-1\"\n})([\"display:flex;flex-direction:column;justify-content:center;align-items:center;border-top:\", \";\"], props => `1px solid ${props.border}`);\n\nconst ThemeListView = ({\n  currentTheme,\n  themeOptions,\n  onAddOrUpdateTheme\n}) => {\n  if (!themeOptions) {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  const editTheme = theme => {\n    return () => {\n      onAddOrUpdateTheme(theme);\n    };\n  };\n\n  const selectTheme = theme => {\n    return () => {\n      console.log(theme);\n    };\n  };\n\n  const textStyle = _objectSpread({}, GridElementHeaderProps(currentTheme));\n\n  return __jsx(ThemeListWrapper, {\n    border: currentTheme.border.colors.primary,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, __jsx(FontAwesomeIcon, {\n    icon: faPlusCircle,\n    color: currentTheme.icon.colors.other.c,\n    onClick: onAddOrUpdateTheme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }), themeOptions.map(themeOption => {\n    return __jsx(ThemeOption, {\n      theme: themeOption,\n      textStyle: textStyle,\n      onSelectTheme: selectTheme(themeOption),\n      onEditTheme: editTheme(themeOption),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }\n    });\n  }));\n};\n\nexport const ManageThemes = ({\n  theme: currentTheme,\n  setTheme\n}) => {\n  const {\n    0: selectedThemeFormValues,\n    1: setSelectedThemeFormValues\n  } = useState(null);\n  const {\n    themeOptions,\n    onUpdateTheme\n  } = useThemeOptions();\n\n  const selectThemeForm = formFields => {\n    setSelectedThemeFormValues(formFields);\n  };\n\n  const saveTheme = async theme => {\n    onUpdateTheme(theme);\n  };\n\n  const applyTheme = theme => {\n    const builtTheme = buildTheme(theme);\n    setTheme(builtTheme);\n  };\n\n  const closeForm = () => {\n    setSelectedThemeFormValues(null);\n  };\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }, __jsx(SimpleText, _extends({}, TabSectionHeaderProps(currentTheme), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }), \"Manage Themes\"), selectedThemeFormValues ? __jsx(ThemeForm, {\n    currentTheme: currentTheme,\n    initialValues: selectedThemeFormValues,\n    onSave: saveTheme,\n    onApply: applyTheme,\n    onDone: closeForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }) : __jsx(Grid, {\n    numCols: 16,\n    numRows: 9,\n    rowUnit: \"28px\",\n    colUnit: \"28px\",\n    key: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, __jsx(GridElement, {\n    position: {\n      startCol: 1,\n      endCol: 17,\n      startRow: 1,\n      endRow: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, __jsx(ThemeListView, {\n    themeOptions: themeOptions,\n    currentTheme: currentTheme,\n    onAddOrUpdateTheme: selectThemeForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }))));\n};","map":{"version":3,"sources":["/Users/steven/Documents/lootcrate/gimme-the-loot/src/components/Tabs/manage_themes/manage_themes.jsx"],"names":["GridElement","Grid","TabSectionHeaderProps","GridElementHeaderProps","SimpleText","faPlusCircle","faEdit","FontAwesomeIcon","styled","useState","useRef","CompactPicker","RelativePop","useThemeOptions","ThemeForm","buildTheme","ThemeOptionWrapper","div","ThemeOption","theme","textStyle","onSelectTheme","onEditTheme","editable","name","ThemeListWrapper","props","border","ThemeListView","currentTheme","themeOptions","onAddOrUpdateTheme","editTheme","selectTheme","console","log","colors","primary","icon","other","c","map","themeOption","ManageThemes","setTheme","selectedThemeFormValues","setSelectedThemeFormValues","onUpdateTheme","selectThemeForm","formFields","saveTheme","applyTheme","builtTheme","closeForm","startCol","endCol","startRow","endRow"],"mappings":"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","sourcesContent":["import { GridElement } from \"../../CoreUI/Grid/GridElement\";\nimport { Grid } from \"../../CoreUI/Grid/Grid\";\nimport {\n  TabSectionHeaderProps,\n  GridElementHeaderProps,\n} from \"../../../utils/styleUtils/commonTextProps\";\nimport { SimpleText } from \"../../CoreUI/Text/SimpleText\";\nimport { faPlusCircle, faEdit } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport styled from \"styled-components\";\nimport { useState, useRef } from \"react\";\nimport { CompactPicker } from \"react-color\";\nimport { RelativePop } from \"../../CoreUI/Popover/RelativePop\";\nimport { useThemeOptions } from \"../../../hooks/useThemeOptions\";\nimport { ThemeForm } from \"./theme_form\";\nimport buildTheme from \"../../../themes/buildTheme\";\n\nconst ThemeOptionWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nconst ThemeOption = ({\n  theme,\n  textStyle,\n  onSelectTheme,\n  onEditTheme,\n  editable = true,\n}) => {\n  return (\n    <ThemeOptionWrapper onClick={onSelectTheme}>\n      <SimpleText {...textStyle}>{theme.name}</SimpleText>\n      {editable && onEditTheme && (\n        <FontAwesomeIcon onClick={onEditTheme} icon={faEdit} />\n      )}\n    </ThemeOptionWrapper>\n  );\n};\n\nconst ThemeListWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  border-top: ${(props) => `1px solid ${props.border}`};\n`;\n\nconst ThemeListView = ({ currentTheme, themeOptions, onAddOrUpdateTheme }) => {\n  if (!themeOptions) {\n    return <div>Loading...</div>;\n  }\n\n  const editTheme = (theme) => {\n    return () => {\n      onAddOrUpdateTheme(theme);\n    };\n  };\n\n  const selectTheme = (theme) => {\n    return () => {\n      console.log(theme);\n    };\n  };\n\n  const textStyle = { ...GridElementHeaderProps(currentTheme) };\n\n  return (\n    <ThemeListWrapper border={currentTheme.border.colors.primary}>\n      <FontAwesomeIcon\n        icon={faPlusCircle}\n        color={currentTheme.icon.colors.other.c}\n        onClick={onAddOrUpdateTheme}\n      />\n      {themeOptions.map((themeOption) => {\n        return (\n          <ThemeOption\n            theme={themeOption}\n            textStyle={textStyle}\n            onSelectTheme={selectTheme(themeOption)}\n            onEditTheme={editTheme(themeOption)}\n          />\n        );\n      })}\n    </ThemeListWrapper>\n  );\n};\n\nexport const ManageThemes = ({ theme: currentTheme, setTheme }) => {\n  const [selectedThemeFormValues, setSelectedThemeFormValues] = useState(null);\n  const { themeOptions, onUpdateTheme } = useThemeOptions();\n\n  const selectThemeForm = (formFields) => {\n    setSelectedThemeFormValues(formFields);\n  };\n\n  const saveTheme = async (theme) => {\n    onUpdateTheme(theme);\n  };\n\n  const applyTheme = (theme) => {\n    const builtTheme = buildTheme(theme);\n    setTheme(builtTheme);\n  };\n\n  const closeForm = () => {\n    setSelectedThemeFormValues(null);\n  };\n\n  return (\n    <React.Fragment>\n      <SimpleText {...TabSectionHeaderProps(currentTheme)}>\n        Manage Themes\n      </SimpleText>\n      {selectedThemeFormValues ? (\n        <ThemeForm\n          currentTheme={currentTheme}\n          initialValues={selectedThemeFormValues}\n          onSave={saveTheme}\n          onApply={applyTheme}\n          onDone={closeForm}\n        />\n      ) : (\n        <Grid numCols={16} numRows={9} rowUnit=\"28px\" colUnit=\"28px\" key={0}>\n          <GridElement\n            position={{\n              startCol: 1,\n              endCol: 17,\n              startRow: 1,\n              endRow: 10,\n            }}\n          >\n            <ThemeListView\n              themeOptions={themeOptions}\n              currentTheme={currentTheme}\n              onAddOrUpdateTheme={selectThemeForm}\n            />\n          </GridElement>\n        </Grid>\n      )}\n    </React.Fragment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}